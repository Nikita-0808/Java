
-------------------------------------------------------------------------------------------- Memoization and Tabulation ---------------------------------------------------------------------------------------------
public class Dp {

    public static int fibMemoization(int n, int f[]){
        if(n ==0 || n== 1){
            return n;
        }

        if(f[n] != 0){
            return f[n];
        }

        f[n] = fibMemoization(n-1, f) +fibMemoization(n-2, f);
        return f[n];
    }

    public static int fibTabulation(int n){
        int dp[] = new int[n+1];
        dp[0] =0;
        dp[1] =1;
        
        for(int i=2; i<=n; i++)
        dp[i] = dp[i-1] + dp[i-2];
        return dp[n];
    }

    public static void main(String[] args) {
        int n =5;
        int fib[] = new int[n+1];
        System.out.println(fibMemoization(n, fib));
        System.out.println(fibTabulation(n));  
    }
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

problem : climbing Stairs


import java.util.Arrays;

public class Dp {

    // by recursion
    public static int countways(int n){
        if(n == 0){
            return 1;
        }
        if(n<0){
            return 0;
        }
        return countways(n-1)+ countways(n-2);
    }

    //by memoization
    public static int countWaysMemoization(int n, int ways[]){
        if(n == 0){
            return 1;
        }
        if(n<0){
            return 0;
        }

        if(ways[n] != -1){
            return ways[n];
        }
        ways[n] = countWaysMemoization(n-1, ways)+ countWaysMemoization(n-2, ways);
        return ways[n];
    }

    // by tabulation
    public static int countWaysTabulation(int n){
        int dp[] = new int[n+1];
        dp[0] = 1;

        for(int i =1; i<=n ; i++){
            if(i == 1){
                dp[i] = dp[i-1];
            }else{
                dp[i] = dp[i-1] + dp[i-2];
            }
        }
        return dp[n];
    }

    public static void main(String[] args) {
        int n=5;
        int ways[] = new int[n+1];
        Arrays.fill(ways, -1);
        System.out.println(countways(n));
        System.out.println(countWaysMemoization(n, ways));
        System.out.println(countWaysTabulation(n));
    }
}

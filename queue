
-------------------------------------------------- Implementation of queue using Array ------------------------------------------------------------------------

public class QueueBasic {
    static class Queue{
        static int arr[];
        static int size;
        static int rear;
        Queue(int n){
            arr = new int[n];
            size = n;
            rear = -1;
        }

        public static boolean isEmpty(){
            return rear == -1;
        }

        //add
        public static void add(int data){
            if(rear == size-1){
                System.out.println("queue id full");
                return;
            }

            rear = rear +1;
            arr[rear] = data;
        }

        //remove 
        public static int remove(){
            if(isEmpty()){
                System.out.println("empty queue");
                return -1;
            }

            int front = arr[0];
            for(int i=0;i<rear;i++){
                arr[i]=arr[i+1];
            }
            rear = rear -1;
            return front;
        }

        //peek
        public static int peek(){
            if(isEmpty()){
                System.out.println("empty queue");
                return -1;
            }
            return arr[0];
        }
    }
    public static void main(String[] args) {
        Queue q = new Queue(5);
        q.add(1);
        q.add(2);
        q.add(3);
        while(!q.isEmpty()){
            System.out.println(q.peek());
            q.remove();
        }        
    }
}


-------------------------------------------------- Implementation of Circular queue using Array ------------------------------------------------------------------------

public class QueueBasic {
    static class Queue{
        static int arr[];
        static int size;
        static int rear;
        static int front;
        Queue(int n){
            arr = new int[n];
            size = n;
            rear = -1;
            front =-1;
        }

        public static boolean isEmpty(){
            return rear == -1 && front ==-1;
        }

        //full
        public static boolean isFull(){
            return (rear + 1)% size == front;
        }

        //add
        public static void add(int data){
            if(isFull()){
                System.out.println("queue id full");
                return;
            }
            if(front == -1){
                front =0;
            }

            rear = (rear +1) % size;
            arr[rear] = data;
        }

        //remove 
        public static int remove(){
            if(isEmpty()){
                System.out.println("empty queue");
                return -1;
            }

            int result = arr [front];
            //last el delete
            if(rear == front){
                rear = front = -1;
            }else{
                front =(front + 1) % size;
            }
            return result;
        }

        //peek
        public static int peek(){
            if(isEmpty()){
                System.out.println("empty queue");
                return -1;
            }
            return arr[front];
        }
    }
    public static void main(String[] args) {
        Queue q = new Queue(3);
        q.add(1);
        q.add(2);
        q.add(3);
        q.remove();
        q.add(4);
        q.remove();
        q.add(5);
        while(!q.isEmpty()){
            System.out.println(q.peek());
            q.remove();
        }        
    }
}


-------------------------------------------------- Implementation of queue using Linked list ------------------------------------------------------------------------

public class QueueBasic {
    static class Node{
        int data;
        Node next;

        Node(int data){
            this.data = data;
            this.next = null;
        }
    }
    static class Queue{
        static Node head = null;
        static Node tail = null;
      
        public static boolean isEmpty(){
            return head == null && tail == null;
        }

        //add
        public static void add(int data){
           Node newNode = new Node(data);
           if(head == null){
                head = tail = newNode;
                return;
           }
           tail.next = newNode;
           tail = newNode;
        }

        //remove 
        public static int remove(){
            if(isEmpty()){
                System.out.println("empty queue");
                return -1;
            }
            int front = head.data;
            if(tail == head){
                tail = head = null;
            }else{
                head = head.next;
            }
            return front;
        }

        //peek
        public static int peek(){
            if(isEmpty()){
                System.out.println("empty queue");
                return -1;
            }
            return head.data;
        }
    }
    public static void main(String[] args) {
        Queue q = new Queue();
        q.add(1);
        q.add(2);
        q.add(3);
        
        while(!q.isEmpty()){
            System.out.println(q.peek());
            q.remove();
        }        
    }
}


-------------------------------------------------- Queue using java Collection Framework ------------------------------------------------------------------------

import java.util.*;

public class QueueBasic {

    public static void main(String[] args) {
        Queue<Integer> q = new ArrayDeque<>();
        q.add(1);
        q.add(2);
        q.add(3);
        
        while(!q.isEmpty()){
            System.out.println(q.peek());
            q.remove();
        }        
    }
}


--------------------------------------------------------------------- Queue using 2 Stacks ------------------------------------------------------------------------

import java.util.*;

public class QueueBasic {
    static class Queue {
        static Stack<Integer> s1 = new Stack<>(); 
        static Stack<Integer> s2 = new Stack<>();  
        
        public static boolean isEmpty(){
            return s1.isEmpty();
        }

        //add - 0(n)
        public static void add(int data){
            while(!s1.isEmpty()){
                s2.push(s1.pop());
            }
            s1.push(data);

            while (!s2.isEmpty()) {
               s1.push(s2.pop()); 
            }
        }

        // remove
        public static int remove(){
            if(isEmpty()){
                System.out.println("Queue is empty");
                return -1;
            }
            return s1.pop();
        }

        //peek
        public static int peek(){
            if(isEmpty()){
                System.out.println("Queue is empty");
                return -1;
            }
            return s1.peek();
        }
    }

    public static void main(String[] args) {
        Queue q = new Queue();
        q.add(1);
        q.add(2);
        q.add(3);
                
        while(!q.isEmpty()){
            System.out.println(q.peek());
            q.remove();
        }        
    }
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

# QUESTION  : First non-repeating Letter in a stream of characters

import java.util.*;

public class QueueBasic {

    public static void printNonRepeating(String str){
        int freq[] = new int[26]; //'a'-'z'
        Queue<Character> q = new ArrayDeque<>();

        for(int i=0; i< str.length(); i++){
            char ch = str.charAt(i);
            q.add(ch);
            freq[ch -'a']++;

            while(!q.isEmpty() && freq[q.peek() - 'a']> 1){
                q.remove();
            }

            if(q.isEmpty()){
                System.out.print("-1" + " ");
            }else{ 
                System.out.print(q.peek() + " ");
            }
        }
        System.out.println();
    }

    public static void main(String[] args) {
        String str = "aabccxb";
        printNonRepeating(str);
    }
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

# QUESTION  : Interleave 2 halves of a queue

import java.util.*;

public class QueueBasic {

    public static void interLeave(Queue<Integer>q){
        Queue<Integer> firstHalf = new ArrayDeque<>();
        int size = q.size();

        for(int i=0; i<size/2;i++){
            firstHalf.add(q.remove());
        }

        while(!firstHalf.isEmpty()){
           q.add(firstHalf.remove());
           q.add(q.remove()); 
        }
    }

    public static void main(String[] args) {
        Queue<Integer> q = new ArrayDeque<>();
        q.add(1);
        q.add(2);
        q.add(3);
        q.add(4);
        q.add(5);
        q.add(6);
        q.add(7);
        q.add(8);
        q.add(9);
        q.add(10);
        interLeave(q);

        while(!q.isEmpty()){
            System.out.print(q.remove() + " ");
        }
        System.out.println();
    }
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

# QUESTION  : Queue Reversal

import java.util.*;

public class QueueBasic {

    public static void reverse(Queue<Integer> q){
        Stack<Integer> s = new Stack<>();

        while(! q.isEmpty()){
            s.push(q.remove());
        }

        while (!s.isEmpty()){
            q.add(s.pop());
        }
    }

    public static void main(String[] args) {
        Queue<Integer> q = new ArrayDeque<>();
        q.add(1);
        q.add(2);
        q.add(3);
        q.add(4);
        q.add(5);

        reverse(q);

        while (!q.isEmpty()) {
            System.out.print(q.remove() + "  ");
        }
        System.out.println();
    }
}


-----------------------------------------------------------------------  Deque (Double ended queue) ---------------------------------------------------------------------------------------------

import java.util.*;

public class QueueBasic {

    public static void main(String[] args) {
        Deque<Integer> deque = new ArrayDeque<>();
        deque.addFirst(2);
        deque.addFirst(1);
        deque.addLast(3);
        deque.addLast(4);
        System.out.println(deque);
        deque.removeLast();
        System.out.println(deque);

        System.out.println("First element = " + deque.getFirst());
        System.out.println("Last element = "+ deque.getLast());
    }
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

# QUESTION : Implement stack using deque

import java.util.*;

public class QueueBasic {
    static class stack {
        Deque<Integer> deque = new ArrayDeque<>();

        //push operation
        public void push(int data){
            deque.addLast(data);
        }

        //pop operation
        public int pop(){
            return deque.removeLast();
        }

        //peek operation
        public int peek(){
            return deque.getLast();
        }  
    }

    public static void main(String[] args) {
        Stack s= new Stack();
        s.push(1);
        s.push(2);
        s.push(3);
        System.out.println(s);
        System.out.println("peek = " + s.peek()); 
        System.out.println(s.pop());
        System.out.println(s.pop());
        System.err.println(s.pop());
    }
}


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

# QUESTION : Implement Queue using deque

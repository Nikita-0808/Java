Problem : place n quens in n rows (all possible solutions)

public class Nqueen {
    public static void nQueens(char board[][],int row){
        //base case
        if(row == board.length ){
            printBoard(board);
            return;
        }
        //column loop
        for(int j=0;j<board.length;j++){
            board[row][j]='Q' ;
            nQueens(board, row+1);
            board[row][j]='x' ;
        }
    }

    public static void printBoard(char board[][]){
        System.out.println("-------------------------chess board-----------------------------");
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board.length;j++){
                System.out.print(board[i][j]);
            }
            System.out.println();
    }
}
    public static void main(String args[]) {
        int n=2;
        char board[][]= new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='x' ;
            }       
       }
       nQueens(board, 0);
    }
    
}


-----------------------------------------------------------------------------------------------------------------------------

Problem : is safe in row and column

public class Nqueen {

    public static boolean isSafe(char board[][], int row, int col){
        // vertical up
        for( int i=row-1;i>=0;i--){
            if( board[i][col]=='Q'){
                return false;
            }  
        }

        // left up diagonal
        for(int i=row-1, j=col-1; i>=0 && j>=0; i--,j--){
            if( board[i][j]=='Q'){
                return false;
            }  
        }

        // right up diagonal
        for(int i=row-1, j=col+1; i>=0 && j<board.length; i--,j++){
            if( board[i][j]=='Q'){
                return false;
            }  
        }
        return true;
    }

    public static void nQueens(char board[][],int row){
        //base case
        if(row == board.length ){
            printBoard(board);
            return;
        }
        //column loop
        for(int j=0;j<board.length;j++){
           if(isSafe(board, row, j)){
            board[row][j]='Q' ;
            nQueens(board, row+1);
            board[row][j]='x' ;
           }
        }
    }

    public static void printBoard(char board[][]){
        System.out.println("-------------------------chess board-----------------------------");
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board.length;j++){
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
    }
}
    public static void main(String args[]) {
        int n=4;
        char board[][]= new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='x' ;
            }       
       }
       nQueens(board, 0);
    }
    
}


--------------------------------------------------------------------------------------------------------------------------------

Problem : Count total number of ways in which we can solve N queens problem

public class Nqueen {

    public static boolean isSafe(char board[][], int row, int col){
        // vertical up
        for( int i=row-1;i>=0;i--){
            if( board[i][col]=='Q'){
                return false;
            }  
        }

        // left up diagonal
        for(int i=row-1, j=col-1; i>=0 && j>=0; i--,j--){
            if( board[i][j]=='Q'){
                return false;
            }  
        }

        // right up diagonal
        for(int i=row-1, j=col+1; i>=0 && j<board.length; i--,j++){
            if( board[i][j]=='Q'){
                return false;
            }  
        }
        return true;
    }

    public static void nQueens(char board[][],int row){
        //base case
        if(row == board.length ){
            //printBoard(board);
            count++;
            return;
        }
        //column loop
        for(int j=0;j<board.length;j++){
           if(isSafe(board, row, j)){
            board[row][j]='Q' ;
            nQueens(board, row+1);
            board[row][j]='x' ;
           }
        }
    }

    public static void printBoard(char board[][]){
        System.out.println("-------------------------chess board-----------------------------");
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board.length;j++){
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
    }
}
    static int count=0;
    public static void main(String args[]) {
        int n=5;
        char board[][]= new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='x' ;
            }       
       }
       nQueens(board, 0);
       System.out.println(" total ways to solve n queens = "+ count);
    }
    
}


----------------------------------------------------------------------------------------------------------------------------

Problem : PRINT 1 SOLUTION (Check if problem can be solved and print only 1 soln to n queens problem )

public class Nqueen {

    public static boolean isSafe(char board[][], int row, int col){
        // vertical up
        for( int i=row-1;i>=0;i--){
            if( board[i][col]=='Q'){
                return false;
            }  
        }

        // left up diagonal
        for(int i=row-1, j=col-1; i>=0 && j>=0; i--,j--){
            if( board[i][j]=='Q'){
                return false;
            }  
        }

        // right up diagonal
        for(int i=row-1, j=col+1; i>=0 && j<board.length; i--,j++){
            if( board[i][j]=='Q'){
                return false;
            }  
        }
        return true;
    }

    public static boolean nQueens(char board[][],int row){
        //base case
        if(row == board.length ){
            //printBoard(board);
            //count++;
            return true;
        }
        //column loop
        for(int j=0;j<board.length;j++){
           if(isSafe(board, row, j)){
            board[row][j]='Q' ;
            if(nQueens(board, row+1)){
                return true;
            }
            board[row][j]='x' ;
           }
        }
        return false;
    }

    public static void printBoard(char board[][]){
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board.length;j++){
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }
    //static int count=0;
    public static void main(String args[]) {
        int n=4;
        char board[][]= new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='x' ;
            }       
       }
       if(nQueens(board, 0)){
        System.out.println("solution is possible");
        printBoard(board);
       }
       else{
        System.out.println("solution is not possible");
       }
    }
    
}

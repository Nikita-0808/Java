
----------------------------------------------------------- rod cutting ---------------------------------------------------------

public class Dp3 {

    public static void print(int dp[][]){
        for(int i=0; i< dp.length; i++){
            for(int j =0; j< dp[0].length; j++){
                System.out.print( dp [i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    // by tabulation
    public static int rodCutting(int length[], int price[], int totRod){
        int n = length.length;
        int dp[][]= new int[n+1][totRod+1];
        for(int i=0; i<dp.length; i++){
            dp[i][0] = 0;
        }
        for(int j=0; j < dp[0].length; j++){
            dp[0][j] = 0 ;
        }

        for(int i=1; i<n+1; i++){
            for(int j=1; j<totRod+1; j++){
                if(length[i-1] <= j){
                    //valid
                    dp[i][j] = Math.max(price[i-1] + dp[i][j-length[i-1]],dp[i-1][j]);
                }else{
                    //invalid
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        print(dp);
        return dp[n][totRod];
    }


    public static void main(String[] args) {
        int length[]= { 1,2,3,4,5,6,7,8};
        int price[] = {1,5,8,9,10,17,17,20};
        int totRod = 8;
    
        System.out.println(rodCutting(length, price, totRod));
    }
}


-------------------------------------------------- longest common subsequence ------------------------------------------------


public class Dp3 {

    // by recursion
    public static int lcs(String str1, String str2, int n, int m){
        if(n == 0 || m == 0){
            return 0;
        }

        if(str1.charAt(n-1) == str2.charAt(m-1)){
            return lcs(str1, str2, n-1, m-1)+1;
        }else{
            int ans1 = lcs(str1, str2, n-1, m);
            int ans2 = lcs(str1, str2, n, m-1);
            return Math.max(ans1, ans2);
        }
    }

    // by memoization
    public static int lcsMemoization(String str1, String str2, int n, int m, int dp[][]){
        if(n == 0 || m == 0){
            return 0;
        }

        if (dp[n][m] != -1) {
           return dp[n][m]; 
        }

        if(str1.charAt(n-1) == str2.charAt(m-1)){
            dp[n][m] = lcsMemoization(str1, str2, n-1, m-1,dp)+1;
        }else{
            int ans1 = lcsMemoization(str1, str2, n-1, m,dp);
            int ans2 = lcsMemoization(str1, str2, n, m-1,dp);
            dp[n][m] = Math.max(ans1, ans2);
        }
        return dp[n][m];
    }

    public static void print(int dp[][]){
        for(int i=0; i< dp.length; i++){
            for(int j =0; j< dp[0].length; j++){
                System.out.print( dp [i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    // by tabulation
    public static int lcsTabulation(String str1, String str2, int n, int m){
        int dp[][] = new int[n+1][m+1];
        for(int i=0; i< dp.length ; i++){
            for(int j =0; j< dp[0].length; j++){
                if(i == 0 || j == 0){
                dp[i][j] = 0;
                }
            }
        }

        for(int i=1; i<n+1; i++){
            for(int j=1; j< m+1; j++){
                if (str1.charAt(i-1) == str2.charAt(j-1)) {
                    dp[i][j] = dp[i-1][j-1] +1;
                }else{
                    int ans1 = dp[i-1][j];
                    int ans2 = dp[i][j-1];
                    dp[i][j] = Math.max(ans1, ans2);
                }
            }
        }
        print(dp);
        return dp[n][m];
    }
    
    public static void main(String[] args) {
        String str1 = "abcde";
        String str2 = "ace";
        int dp[][] = new int[str1.length()+1][str2.length()+1];
        for(int i=0; i<str1.length()+1 ; i++){
            for(int j =0; j< str2.length()+1; j++){
                dp[i][j] = -1;
            }
        }

        System.out.println(lcs(str1, str2, str1.length(), str2.length()));
        System.out.println(lcsMemoization(str1, str2, str1.length(), str2.length(), dp));
        System.out.println(lcsTabulation(str1, str2, str1.length(), str2.length()));
    }
}

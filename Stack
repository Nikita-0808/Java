-------------------------------------------------- Stack implementation using ArrayList -------------------------------------------------------------

import java.util.ArrayList;

public class StackBasic {
    static class  Stack {
        static ArrayList<Integer> list = new ArrayList<>();
        
        public static boolean isEmpty(){
            return list.size() == 0;
        }

        //push
        public static void push(int data){
            list.add(data);
        }

        //pop
        public static int pop(){
            if(isEmpty()){
                return -1;
            }
            int top = list.get(list.size()-1);
            list.remove(list.size()-1);
            return top;
        }

        //peek
        public static int peek(){
            if(isEmpty()){
                return -1;
            }
            return list.get(list.size()-1);

        }   
    }
    
    public static void main(String[] args) {
        Stack s = new Stack();
        s.push(1);
        s.push(2);
        s.push(3);
        while(!s.isEmpty()){
            System.out.println(s.peek());
            s.pop();
        }
    } 
}


-------------------------------------------------- Stack implementation using Linked List -------------------------------------------------------------

public class StackBasic {
    static class Node{
        int data;
        Node next;
        Node(int data){
            this.data = data;
            this.next = null;
        }    
    }
    static class  Stack {
        static Node head = null;

        public static boolean isEmpty(){
            return head == null;
        }

        //push
        public static void push(int data){
            Node newNode = new Node(data);
            if(isEmpty()){
                head = newNode;
                return;
            }

            newNode.next = head;
            head = newNode;
        }

        //pop
        public static int pop(){
            if(isEmpty()){
                return -1;
            }
            int top = head.data;
            head = head.next;
            return top;
        }

        //peek
        public static int peek(){
            if(isEmpty()){
                return -1;
            }
            return head.data;
        }
    }
    
    public static void main(String[] args) {
        Stack s = new Stack();
        s.push(1);
        s.push(2);
        s.push(3);
        while(!s.isEmpty()){
            System.out.println(s.peek());
            s.pop();
        }
    } 
}


-------------------------------------------------- Stack implementation using collection framework -------------------------------------------------------------

import java.util.*;

public class StackBasic {
    public static void main(String[] args) {
        Stack<Integer> s = new Stack<>();
        s.push(1);
        s.push(2);
        s.push(3);
        while(!s.isEmpty()){
            System.out.println(s.peek());
            s.pop();
        }
    } 
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------

# QUESTION 1 : push at the bottom of the stack

import java.util.*;

public class StackBasic {

    public static void pushAtBottom(Stack<Integer> s, int data){

        // base case
        if(s.isEmpty()){
            s.push(data);
            return;
        }

        //recursion
        int top = s.pop();       
        pushAtBottom(s, data);
        s.push(top);
    }
    public static void main(String[] args) {
        Stack<Integer> s = new Stack<>();
        s.push(1);
        s.push(2);
        s.push(3);
        
        pushAtBottom(s, 4);
        while(! s.isEmpty()){
            System.out.println(s.pop());
        }
    } 
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------

# QUESTION 2 : Reverse a String using Stack

import java.util.*;

public class StackBasic {

    public static String reverseString(String str){
        Stack<Character> s = new Stack<>();
        int idx =0;
        while(idx < str.length()){
            s.push(str.charAt(idx));
            idx++;
        }

        StringBuilder result = new StringBuilder("");
        while(! s.isEmpty()){
            char curr = s.pop();
            result. append(curr);
        }
        return result.toString();
    }
    public static void main(String[] args) {
        String str = "abc";
        String result = reverseString(str);
        System.out.println(result);   
    } 
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------

# QUESTION 3 : Reverse a Stack

import java.util.*;

public class StackBasic {

    public static void pushAtBottom(Stack<Integer> s, int data){

        // base case
        if(s.isEmpty()){
            s.push(data);
            return;
        }

        //recursion
        int top = s.pop();       
        pushAtBottom(s, data);
        s.push(top);
    }

    public static void reverseStack(Stack<Integer> s){
        
        //base case
        if(s.isEmpty()){
            return;
        }

        //recursion
        int top = s.pop();
        reverseStack(s);
        pushAtBottom(s, top);
    }

    public static void printStack(Stack<Integer> s){
        while(!s.isEmpty()){
            System.out.println(s.pop());
        }
    }
    
    public static void main(String[] args) {
        Stack<Integer> s = new Stack<>();
        s.push(1);
        s.push(2);
        s.push(3);
        // 3, 2, 1      
        reverseStack(s);
        printStack(s);
        // 1, 2, 3
    } 
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------

# QUESTION 4 : Stock Span problem

import java.util.*;
public class StackBasic {

    public static void stockSpan(int stocks[],int span[]){
        Stack<Integer> s = new Stack<>();
        span[0] = 1;
        s.push(0);
         for(int i=1; i<stocks.length;i++){
            int currPrice = stocks[i];
            while(!s.isEmpty() && currPrice > stocks[s.peek()]){
                s.pop();
            }
            if(s.isEmpty()){
                span[i] = i+1;
            }else{
                int prevHigh = s.peek();
                span[i] = i-prevHigh;
            }
            s.push(i);
         }
    }
    public static void main(String[] args) {
        int stocks[] = {100, 80, 60, 70, 60, 85, 100};
        int span[] = new int[stocks.length];
        stockSpan(stocks,span);

        for(int i=0; i<span.length; i++){
            System.out.println(span[i] + " ");
        }
    }  
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------

# QUESTION 4 : Next Greater Element

import java.util.*;

public class StackBasic {

    public static void NextGreater(int arr[], int nextGreater[]){
        Stack<Integer> s= new Stack<>();
        for(int i= arr.length-1;i>=0;i--){
            
            //step 1 : while
            while (!s.isEmpty() && arr[s.peek()]<= arr[i]) {
                s.pop();                
            }

            // step 2 : if-else
            if(s.isEmpty()){
                nextGreater[i] = -1;
            }else{
                nextGreater[i]=arr[s.peek()]; 
            }

            // step 3: push in s
            s.push(i);
        }

        for(int i=0; i < nextGreater.length;i++){
            System.out.print(nextGreater[i] + "  ");
        }
    }

    public static void main(String[] args) {
        int arr[] = {6, 8, 0, 1, 3};
        int nextGreater[] = new int [arr.length];
        NextGreater(arr, nextGreater);
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------

# QUESTION 4 : Valid Parentheses



--------------------------------------------------- longest common substring -------------------------------------------------------


public class Dp3 {

    public static void print(int dp[][]){
        for(int i=0; i< dp.length; i++){
            for(int j =0; j< dp[0].length; j++){
                System.out.print( dp [i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    // by tabulation
    public static int lcsTabulation(String str1, String str2, int n, int m){
        int ans =0;
        int dp[][] = new int[n+1][m+1];
        for(int i=0; i< dp.length ; i++){
            for(int j =0; j< dp[0].length; j++){
                if(i == 0 || j == 0){
                dp[i][j] = 0;
                }
            }
        }

        for(int i=1; i<n+1; i++){
            for(int j=1; j< m+1; j++){
                if (str1.charAt(i-1) == str2.charAt(j-1)) {
                    dp[i][j] = dp[i-1][j-1] +1;
                    ans = Math.max(ans, dp[i][j]);
                }else{
                    dp[i][j] = 0;
                }
            }
        }
        print(dp);
        return ans;
    }
    
    public static void main(String[] args) {
        String str1 = "ABCDE";
        String str2 = "ABGCE";

        System.out.println(lcsTabulation(str1, str2, str1.length(), str2.length()));
    }
}


output : 
0 0 0 0 0 0 
0 1 0 0 0 0
0 0 2 0 0 0
0 0 0 0 1 0
0 0 0 0 0 0
0 0 0 0 0 1

2


--------------------------------------------------------- longest increasing subsequence ---------------------------------------------------------------

import java.util.Arrays;
import java.util.HashSet;

public class Dp3{

    public static void print(int dp[][]){
        for(int i=0; i< dp.length; i++){
            for(int j =0; j< dp[0].length; j++){
                System.out.print( dp [i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    public static int lcs(int arr1[], int arr2[]){
        int n = arr1.length;
        int m = arr2.length;

        int dp[][] = new int[n+1][m+1];
        for(int i=0; i< dp.length ; i++){
            for(int j =0; j< dp[0].length; j++){
                if(i == 0 || j == 0){
                    dp[i][j] = 0;
                }
            }
        }

        for(int i=1; i<n+1; i++){
            for(int j=1; j< m+1; j++){
                if (arr1[i-1] == arr2[j-1]) {
                    dp[i][j] = dp[i-1][j-1] +1;
                }else{
                    int ans1 = dp[i-1][j];
                    int ans2 = dp[i][j-1];
                    dp[i][j] = Math.max(ans1, ans2);
                }
            }
        }
        print(dp);
        return dp[n][m];
    }

    public static int lis(int arr1[]){
        HashSet<Integer> set = new HashSet<>();
        for(int i=0; i<arr1.length; i++){
            set.add(arr1[i]);
        }

        int arr2[] = new int[set.size()];
        int i=0; 
        for(int num : set){
            arr2[i] = num;
            i++;
        }

        Arrays.sort(arr2);// ascending order
        return lcs(arr1, arr2);
    }

    public static void main(String[] args) {
        int arr[]={50, 3, 10, 7, 40, 80};
        System.out.println(lis(arr));
    }
}

Output : 
0 0 0 0 0 0 0 
0 0 0 0 0 1 1
0 1 1 1 1 1 1
0 1 1 2 2 2 2
0 1 2 2 2 2 2
0 1 2 2 3 3 3
0 1 2 2 3 3 4

4


--------------------------------------------------------------- Edit Distance ----------------------------------------------------------


import java.util.*;

public class Dp4 {

    public static void print(int dp[][]){
        for(int i=0; i< dp.length; i++){
            for(int j =0; j< dp[0].length; j++){
                System.out.print( dp [i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    public static int editDistance(String str1, String str2){
        int n = str1.length();
        int m = str2.length();
        int dp[][] = new int[n+1][m+1];

        for(int i=0; i< dp.length; i++){
            for(int j=0; j<dp[0].length;j++){
                if(i == 0) {
                    dp[0][j] = j;
                }
                if(j == 0){
                    dp[i][0] =i;            
                }
            }
        }
        for(int i=1; i<n+1; i++){
            for(int j=1; j< m+1; j++){
                if (str1.charAt(i-1) == str2.charAt(j-1)) {
                    dp[i][j] = dp[i-1][j-1];
                }else{
                    int add = dp[i][j-1] +1;
                    int del = dp[i-1][j] +1;
                    int rep = dp[i-1][j-1]+1;
                    dp[i][j] = Math.min(add, Math.min(del, rep));
                }
            }
        }
        print(dp);
        return dp[n][m];
    }

    public static void main(String[] args) {
        String word1 = "intention";
        String word2 = "execution";
        System.out.println(editDistance(word1, word2));       
    }
}

Output : 
0 1 2 3 4 5 6 7 8 9 
1 1 2 3 4 5 6 6 7 8
2 2 2 3 4 5 6 7 7 7
3 3 3 3 4 5 5 6 7 8
4 3 4 3 4 5 6 6 7 8
5 4 4 4 4 5 6 7 7 7
6 5 5 5 5 5 5 6 7 8
7 6 6 6 6 6 6 5 6 7
8 7 7 7 7 7 7 6 5 6
9 8 8 8 8 8 8 7 6 5

5


----------------------------------------------------------------------- String Conversion ---------------------------------------------------------------------------


import java.util.*;

public class Dp4 {

    public static int lcsTabulation(String str1, String str2, int n, int m){
        int dp[][] = new int[n+1][m+1];
        for(int i=0; i< dp.length ; i++){
            for(int j =0; j< dp[0].length; j++){
                if(i == 0 || j == 0){
                dp[i][j] = 0;
                }
            }
        }

        for(int i=1; i<n+1; i++){
            for(int j=1; j< m+1; j++){
                if (str1.charAt(i-1) == str2.charAt(j-1)) {
                    dp[i][j] = dp[i-1][j-1] +1;
                }else{
                    int ans1 = dp[i-1][j];
                    int ans2 = dp[i][j-1];
                    dp[i][j] = Math.max(ans1, ans2);
                }
            }
        }
        return dp[n][m];
    }

    public static void stringConversion(String str1, String str2){
        int ans = lcsTabulation(str1, str2, str1.length(), str2.length());
        int add = str2.length()-ans;
        int del = str1.length()-ans;
        System.out.println("total addition operation : " + add );
        System.out.println("total delete operation : " + del);
    }

    public static void main(String[] args) {
        String word1 = "abcdef";
        String word2 = "aceg";
        stringConversion(word1, word2);
    }
}

Output : 
total addition operation : 1
total delete operation : 3


 pattern 1: 
    * 
    * *
    * * * 
    * * * *

public class patterns {
    public static void main(String args[]){
        for(int i=0; i<4; i++){
            for(int j=0; j<=i; j++){
                System.out.print("*" + " ");
            }
            System.out.println();
        }
    }
}


--------------------------------------------------------------

 pattern 2: INVERTED STAR PATTERN
    * * * *
    * * *
    * *  
    *

 public class patterns {
    public static void main(String args[]){
        for(int i=0; i<4; i++){
            for(int j=0; j<(4-i); j++){
                System.out.print("*" + " ");
            }
            System.out.println();
        }
    }
}


-------------------------------------------------------------------

 pattern 3: HALF PYRAMID PATTERN
    1
    1 2
    1 2 3
    1 2 3 4

 public class patterns {
    public static void main(String args[]){
        for(int i=1; i<=4; i++){
            for(int j=1; j<=i; j++){
                System.out.print(j + " ");
            }
            System.out.println();
        }
    }
}


-------------------------------------------------------------------------

pattern 4: CHARACTER PATTERN
    A
    B C
    D E F
    G H I J

 public class patterns {
    public static void main(String args[]){
        char ch ='A';
        for(int i=0; i<4; i++){
            for(int j=0; j<=i; j++){
                System.out.print(ch + " ");
                ch++;
            }
            System.out.println();
        }
    }
}

-----------------------------------------------------------------------------
                         ADVANCE PATTERN
-----------------------------------------------------------------------------

pattern 5: HOLLOW RECTANGLE PATTERN
    * * * * *
    *       * 
    *       *
    * * * * *

 public class patterns {
    public static void HollowRectangle(int row , int col){
        for(int i=1; i<=row; i++){
            for(int j=1; j<=col; j++){
                if(i==1 || i==row || j==1 || j==col){

                System.out.print("*"+" ");
                }
                else{
                    System.out.print(" "+ " ");
                }
            }
            System.out.println();
        }
    }
    public static void main(String args[]){
       HollowRectangle(4,5);
    }
}


-----------------------------------------------------------------------------

pattern 6: INVERTED HALF PYRAMID PATTERN
             *
           * *
         * * *
       * * * * 

 public class patterns {
    public static void InvertedHalfPyramid(int row , int col){
        for(int i=1; i<=row; i++){
            //SPACE
            for(int j=1;j<=col-i;j++){
                System.out.print(" "+ " ");
            }
            //STAR
            for(int j=1; j<=i; j++){
                System.out.print("*"+" ");
                }
            System.out.println();
            }
        }
    public static void main(String args[]){
       InvertedHalfPyramid(4,5);
    }
 }


-----------------------------------------------------------------------------

pattern 7: FLOYD'S TRIANGLE PATTERN 
    1
    2 3 
    4 5 6
    7 8 9 10
    11 12 13 14 15 

 public class patterns {
    public static void FloydsTriangle(int row , int col){
        int count=1;
        for(int i=1; i<=row; i++){
            for(int j=1; j<=i; j++){
                System.out.print(count+" ");
                count++;
                }
            System.out.println();
            }
        }
    public static void main(String args[]){
       FloydsTriangle(5,5);
    }
 }


-----------------------------------------------------------------------------

 pattern 8: 0-1 TRIANGLE PATTERN
    1 
    0 1 
    1 0 1
    0 1 0 1
    1 0 1 0 1       

 public class patterns {
    public static void ZeroOneTriangle(int row , int col){
        for(int i=1; i<=row; i++){
            for(int j=1; j<=i; j++){
                if((i+j)%2==0){
                System.out.print("1"+" ");
                }
                else{
                    System.out.print("0"+" ");
                }
            }
        System.out.println();
        }
    }
    public static void main(String args[]){
       ZeroOneTriangle(5,5);
    }
 }


-----------------------------------------------------------------------------

pattern 8: Butterfly pattern
    *             *
    * *         * *
    * * *     * * * 
    * * * * * * * *  
    * * * * * * * * 
    * * *     * * * 
    * *         * *
    *             *

public class patterns {
    public static void butterfly(int n){

        //1st half
        for(int i=1; i<=n; i++){
            //stars
            for(int j=1; j<=i; j++){
                System.out.print("*"+" ");
                }
            //space - 2*(n-i)
            for(int j=1; j<= 2*(n-i); j++){
                System.out.print(" "+" ");
                }
            //stars
            for(int j=1; j<=i; j++){
                System.out.print("*"+" ");
                }

            System.out.println();
        }

        // 2nd half
        for(int i=n; i>=1; i--){
            //stars
            for(int j=1; j<=i; j++){
                System.out.print("*"+" ");
                }
            //space - 2*(n-i)
            for(int j=1; j<= 2*(n-i); j++){
                System.out.print(" "+" ");
                }
            //stars
            for(int j=1; j<=i; j++){
                System.out.print("*"+" ");
                }

            System.out.println();
        }
    }
    public static void main(String args[]){
       butterfly(8);
    }
 }


-----------------------------------------------------------------------------







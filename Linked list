----------------------------------------creating node of linked list-------------------------------------------

public class LinkedList {
    public static class Node{
        int data;
        Node next;
        public Node(int data){
            this. data = data;
            this. next = null;
        }
    }
    public static Node head;
    public static Node tail;
    public static void main(String[] args) {
        // creating link list
        LinkedList ll = new LinkedList();
        ll.head = new Node(1);
        ll.head.next = new Node(2);
    }  
}

-------------------------------------------------------------------------------------------------------------------------------------


public class LinkedList {
    public static class Node{
        int data;
        Node next;
        public Node(int data){
            this. data = data;
            this. next = null;
        }
    }
    public static Node head;
    public static Node tail;
    public static int size;

__________________________________ Addition at starting(first) of LL __________________________________

    public void addFirst(int data){
        // step 1 : create new node
        Node newNode = new Node(data);
        size++;
        if(head == null){
            head = tail = newNode;
            return;
        }
    
        // step 2 : newNode next = head
        newNode.next = head;

        // step 3 : head = newNode
        head = newNode;
    }

__________________________________ Addition at end(last) of LL _____________________________________

    public void addLast(int data){
        Node newNode = new Node(data);
        size++;
        if(head == null){
            head = tail = newNode;
            return;
        }
        tail.next = newNode;
        tail = newNode;
    }

__________________________________ Addition at middle of LL ___________________________________

    public void add(int idx, int data){
        if(idx ==0){
            addFirst(data);
            return;
        }
        Node newNode = new Node(data);
        size++;
        Node temp = head;
        int i=0;
        while(i < idx-1){
            temp = temp.next;
            i++;
        }
        newNode.next = temp.next;
        temp.next = newNode;
    }

__________________________________ Remove starting(first) node of LL ___________________________________

    public int removeFirst(){
        if(size == 0){
            System.out.println(" linked list is empty");
            return Integer.MIN_VALUE;
        }
        else if ( size == 1){
            int val = head.data;
            head = tail = null;
            size = 0;
            return val;
        }
        int val = head.data;
        head = head.next;
        size--;
        return val;
    }

__________________________________ Remove ending(last) node of LL ___________________________________

    public int removeLast(){
        if(size== 0){
            System.out.println("linked list is empty");
            return Integer.MIN_VALUE;
        } else if(size == 1){
            int val = head.data;
            head= tail = null;
            size=0;
            return val;
        }
        //prev : i = size-2
        Node prev = head;
        for(int i=0; i<size-2;i++){
            prev = prev.next;
        }
        int val = prev.next.data;
        prev.next = null;
        tail = prev;
        size--;
        return val;
    }

________________________________________ Iterative search in LL ____________________________________________

    public int iterativeSearch(int key){
        int i=0;
        Node temp = head;
        while(temp != null){
            if(temp.data == key){
                return i;
            }
            temp = temp.next;
            i++;
        }
        return -1;
    }

________________________________________ Recursive search in LL ____________________________________________

    public int helper(Node head , int key){

        //base case
        if(head==null){
            return -1;
        }
        if(head.data == key){
            return 0;
        }

        // recursion
        int idx = helper(head.next, key);
        if(idx == -1){
            return -1;
        }
        return idx+1;
    }
    public int recursiveSearch(int key){
        return helper(head, key);
    }

________________________________________ Reverse LL ____________________________________________

    public void reverse(){
        Node prev = null;
        Node curr = tail = head;
        Node next;
        while(curr != null){
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        head = prev;
    }

________________________________________ Delete Nth node from end ____________________________________________

    public void deleteNthfromEnd(int n){
        // calculate size 
        int sze =0;
        Node temp = head;
        while(temp != null){
            temp = temp.next;
            sz++;
        }
        if(n == sz){
            head = head.next;
            return;
        }
        int i=1;
        int iToFind =sz - n;
        Node prev = head;
        while (i < iToFind) {
            prev = prev.next;
            i++;  
        }
        prev.next = prev.next.next;
        return;
    }

________________________________________ Check palindrome of LL  ____________________________________________

    public Node findMid( Node head){
        Node slow = head;
        Node fast = head;
        while(fast != null && fast.next != null){
            slow = slow.next; // +1
            fast = fast.next.next; // +2
        }
        return slow; // slow is my midnode
    }

    public boolean checkPalindrome(){
        if(head == null || head.next == null){
            return true;
        }
        //step 1 : find mid
        Node miNode = findMid(head);

        // step 2 : reverse 2nd half
        Node prev = null;
        Node curr = miNode;
        Node next;
        while( curr != null){
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }

        Node right = prev; // right half head
        Node left = head;

        // step 3 : check left half & right half
        while(right != null){
            if(left.data != right.data){
                return false;
            }
            left = left.next;
            right = right.next;
        }
        return true;
    }

________________________________________ Printing linked list ____________________________________________

    public void print (){
        if(head == null){
            System.out.println("linked list is empty.");
            return;
        }
        Node temp = head;
        while(temp != null){
            System.out.print( temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }
    public static void main(String[] args) {
        // creating object for linklist class
        LinkedList ll = new LinkedList();

        ll.addFirst(2);
        ll.addFirst(1);
        ll.print();

        ll.addLast(3);
        ll.addLast(4);
        ll.print();

        ll.add(2, 9);
        ll.print();

        ll.removeFirst();
        ll.print();

        ll.removeLast();
        ll.print();

        System.out.println(ll.size);

        System.out.println(ll.iterativeSearch(3));
        System.out.println(ll.iterativeSearch(10));

        System.out.println(ll.recursiveSearch(3));
        System.out.println(ll.recursiveSearch(10));

        ll.print();
        ll.reverse();
        ll.print();

        ll.deleteNthfromEnd(2);
        ll.print();

        System.out.println(ll.checkPalindrome());
    }  
}


-----------------------------------------  Detecting cycle in linked list ------------------------------------------------------------

public class LinkedList {
    public static class Node{
        int data;
        Node next;
        public Node(int data){
            this. data = data;
            this. next = null;
        }
    }
    public static Node head;
    public static Node tail;
    public static int size;

    public static boolean isCycle(){
        Node slow = head;
        Node fast = head;
        while(fast != null && fast.next != null){
            slow =slow.next; //+1
            fast= fast.next.next; //+2
            if(slow == fast){
                return true; // cycle exist
            }
        }
        return false; //cycle does not exist
    }
    public static void main(String[] args) {
        head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(2);
        // head.next.next.next = head;
        System.out.println(isCycle());
    }  
}


-----------------------------------------  Removing cycle in linked list ------------------------------------------------------------

public class LinkedList {
    public static class Node{
        int data;
        Node next;
        public Node(int data){
            this. data = data;
            this. next = null;
        }
    }
    public static Node head;
    public static Node tail;
    public static int size;

    public static boolean isCycle(){
        Node slow = head;
        Node fast = head;
        while(fast != null && fast.next != null){
            slow =slow.next; //+1
            fast= fast.next.next; //+2
            if(slow == fast){
                return true; // cycle exist
            }
        }
        return false; //cycle does not exist
    }
    
    public static void removeCycle(){
        
        // detect cycle
        Node slow = head;
        Node fast = head;
        boolean cycle =false;
        while(fast != null && fast.next != null){
            slow =slow.next; //+1
            fast= fast.next.next; //+2
            if(slow == fast){
                cycle = true; // cycle exist
                break; 
            }
        }
        if(cycle == false){
            return;
        }

        //find meeting point
        slow = head;
        Node prev = null;
        while(slow != fast){
            prev = fast;
            slow = slow.next; //+1
            fast = fast.next; //+1
        }

        // remove cycle -> last.next = null
        prev.next = null;
    }
    public static void main(String[] args) {
        head = new Node(1);
        Node temp = new Node(2);
        head.next = temp;
        head.next.next = new Node(4);
        head.next.next.next = temp;
        System.out.println(isCycle());
        removeCycle();
        System.out.println(isCycle());
    }  
}


-----------------------------------------  Linked list in java collection framework ------------------------------------------------------------

import java.util.LinkedList;

public class basic {

    public static void main(String[] args) {
        
        // create - Objects int float, boolean -> Integer,Float, Character
        LinkedList<Integer> ll = new LinkedList<>();

        // add
        ll.addLast(1);
        ll.addLast(2);
        ll.addFirst(0);
        System.err.println(ll);

        // renove
        ll.removeLast();
        ll.removeFirst();
        System.err.println(ll);
    }
}


-----------------------------------------  Merge sort in linked list  ------------------------------------------------------------


public class LinkedList {
    public static class Node{
        int data;
        Node next;
        public Node(int data){
            this. data = data;
            this. next = null;
        }
    }
    public static Node head;
    public static Node tail;
    public static int size;

    public void addFirst(int data){
        // step 1 : create new node
        Node newNode = new Node(data);
        size++;
        if(head == null){
            head = tail = newNode;
            return;
        }
    
        // step 2 : newNode next = head
        newNode.next = head;

        // step 3 : head = newNode
        head = newNode;
    }

    private Node getMid(Node head){
        Node slow = head;
        Node fast = head.next;
        while(fast != null && fast.next != null){
            slow = slow.next; // +1
            fast = fast.next.next; // +2
        }
        return slow; //  midnode
    }

    private Node merge(Node head1, Node head2){
        Node mergedll = new Node(-1);
        Node temp = mergedll;

        while(head1 != null && head2 != null){
            if(head1.data <= head2.data){
                temp.next = head1;
                head1 = head1.next;
                temp = temp.next;
            }else{
                temp.next = head2;
                head2 = head2.next;
                temp = temp.next;
            }
        }
        
        while(head1 != null){
            temp.next = head1;
            head1 = head1.next;
            temp = temp.next;
        }

        while(head2 != null){
            temp.next = head2;
            head2 = head2.next;
            temp = temp.next; 
        }

        return mergedll.next;
    }

    public Node mergeSort(Node head){
       
        //base case
        if(head == null || head.next == null){
            return head;
        }

        // step 1 : find mid
         Node mid = getMid(head);

        // step 2 : left & right mergeSort
        Node righthead = mid.next;
        mid.next = null;
        Node newLeft = mergeSort(head);
        Node newRight = mergeSort(righthead);

        // strp 3 : Merge
        return merge(newLeft, newRight);
    }

    public void print (){
        if(head == null){
            System.out.println("linked list is empty.");
            return;
        }
        Node temp = head;
        while(temp != null){
            System.out.print( temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
       LinkedList ll = new LinkedList();
       ll.addFirst(1);
       ll.addFirst(2);
       ll.addFirst(3);
       ll.addFirst(4);
       ll.addFirst(5);
       ll.addFirst(6);
       // 6-> 5-> 4-> 3-> 2-> 1

       ll.print();
       ll. head = ll.mergeSort(ll.head);
       ll.print();

       
    }  
}


-----------------------------------------  Merge sort in linked list  ------------------------------------------------------------



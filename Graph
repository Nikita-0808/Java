
------------------------------------------------------------------- Implementation of graph (Adjacency list) -----------------------------------------------------------------------------

import java.util.*;

public class GraphBasic {

    static class Edge{
        int src; 
        int dest; 
        int wt;

        public Edge(int s , int d , int wt){
            this.src = s;
            this.dest = d;
            this.wt = wt;
        }
    }
    public static void main(String[] args) {
        int v=5;
        ArrayList<Edge>[] graph = new ArrayList[v];
        
        for(int i =0; i<v; i++){
            graph[i] = new ArrayList<>();
        }

        // 0 - vertex
        graph[0]. add(new Edge(0, 1, 5));
        // 1- vertex
        graph[1].add(new Edge(1, 0, 5));
        graph[1].add(new Edge(1, 2, 1));
        graph[1].add(new Edge(1, 3, 3));
        // 2-vertex
        graph[2].add(new Edge(2, 1, 1));
        graph[2].add(new Edge(2, 3, 1));
        graph[2].add(new Edge(2, 4, 4));
        // 3- vertex
        graph[3].add(new Edge(3, 1, 3));
        graph[3].add(new Edge(3, 2, 1));
        // 4- vertex
        graph[4].add(new Edge(4, 2, 2));

        // 2's neighbour
        for(int i=0; i<graph[2].size(); i++){
            Edge e = graph[2].get(i);
            System.out.println(e.dest);
        }
    }
}


------------------------------------------------------------------- BFS (Breath First Search) -----------------------------------------------------------------------------

import java.util.*;
import java.util.LinkedList;

public class GraphBasic {

    static class Edge{
        int src; 
        int dest; 
        int wt;

        public Edge(int s , int d , int wt){
            this.src = s;
            this.dest = d;
            this.wt = wt;
        }
    }

    static void creatGraph(ArrayList<Edge> graph[]){
        for(int i=0; i<graph.length; i++){
            graph[i] = new ArrayList<>();
        }

        graph[0].add(new Edge(0, 1, 1));
        graph[0].add(new Edge(0, 2, 1));

        graph[1].add(new Edge(1, 0, 1));
        graph[1].add(new Edge(1, 3, 1));

        graph[2].add(new Edge(2, 0, 1));
        graph[2].add(new Edge(2, 4, 1));

        graph[3].add(new Edge(3, 1, 1));
        graph[3].add(new Edge(3, 4, 1));
        graph[3].add(new Edge(3, 5, 1));

        graph[4].add(new Edge(4, 2, 1));
        graph[4].add(new Edge(4, 3, 1));
        graph[4].add(new Edge(4, 5, 1));

        graph[5].add(new Edge(5, 3, 1));
        graph[5].add(new Edge(5, 4, 1));
        graph[5].add(new Edge(5, 6, 1));

        graph[6].add(new Edge(6, 5, 1));
    }

    public static void bfs(ArrayList<Edge>[] graph){
        Queue<Integer> q = new LinkedList<>();
        boolean visited[] = new boolean[graph.length];
        q.add(0); // source = 0

        while(!q.isEmpty()){
            int curr = q.remove();
            if(!visited[curr]){
                System.out.print(curr + " ");
                visited[curr] = true;

                for(int i=0; i< graph[curr].size(); i++){
                    Edge e = graph[curr].get(i);
                    q.add(e.dest);
                }
            }
        }
    }

    public static void main(String[] args) {

        int v=7;
        ArrayList<Edge> graph[]= new ArrayList[v];
        creatGraph(graph);
        bfs(graph);
        
    }
}


------------------------------------------------------------------- DFS (Depth First Search) -----------------------------------------------------------------------------

import java.util.*;
import java.util.LinkedList;

public class GraphBasic {

    static class Edge{
        int src; 
        int dest; 
        int wt;

        public Edge(int s , int d , int wt){
            this.src = s;
            this.dest = d;
            this.wt = wt;
        }
    }

    static void creatGraph(ArrayList<Edge> graph[]){
        for(int i=0; i<graph.length; i++){
            graph[i] = new ArrayList<>();
        }

        graph[0].add(new Edge(0, 1, 1));
        graph[0].add(new Edge(0, 2, 1));

        graph[1].add(new Edge(1, 0, 1));
        graph[1].add(new Edge(1, 3, 1));

        graph[2].add(new Edge(2, 0, 1));
        graph[2].add(new Edge(2, 4, 1));

        graph[3].add(new Edge(3, 1, 1));
        graph[3].add(new Edge(3, 4, 1));
        graph[3].add(new Edge(3, 5, 1));

        graph[4].add(new Edge(4, 2, 1));
        graph[4].add(new Edge(4, 3, 1));
        graph[4].add(new Edge(4, 5, 1));

        graph[5].add(new Edge(5, 3, 1));
        graph[5].add(new Edge(5, 4, 1));
        graph[5].add(new Edge(5, 6, 1));

        graph[6].add(new Edge(6, 5, 1));
    }

    public static void dfs(ArrayList<Edge>[] graph, int curr , boolean visited[]){

        // visit
        System.out.print(curr + " ");
        visited[curr] = true;

        for(int i=0; i<graph[curr].size();i++){
            Edge e = graph[curr].get(i);
            if(!visited[e.dest]){
                dfs(graph, e.dest, visited);
            }
        }
    }

    public static void main(String[] args) {

        int v=7;
        ArrayList<Edge> graph[]= new ArrayList[v];
        creatGraph(graph);
        dfs(graph, 0, new boolean[v]);    
    }
}


------------------------------------------------------------------- DFS (Depth First Search) -----------------------------------------------------------------------------


---------------------------------------------------Implementation of PriorityQueue using java collection framework --------------------------------------------------------------------------

import java.util.Comparator;
import java.util.PriorityQueue;

public class HeapBasic {
    public static void main(String[] args) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();  // by default priority is given to smallest value
        // PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.reverseOrder());  // priority is given to greatest value

        pq.add(3); // O(log n)
        pq.add(4);
        pq.add(1);
        pq.add(7);

        while(!pq.isEmpty()){
            System.out.println(pq.peek()); //O(1)
            pq.remove(); //O(log n)
        }
    }
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

import java.util.Comparator;
import java.util.PriorityQueue;

public class HeapBasic {
    static class Student implements Comparable<Student> { //overriding
    String name;
    int rank;

    public Student(String name, int rank){
        this.name = name;
        this.rank = rank;
    }

    @Override
    public int compareTo(Student s2){
        return this.rank - s2.rank; 
    }    
}
    public static void main(String[] args) {
        PriorityQueue<Student> pq = new PriorityQueue<>();  

        pq.add(new Student("A" ,  4)); // O(log n)
        pq.add(new Student("B" ,  5)); 
        pq.add(new Student("C" ,  12)); 
        pq.add(new Student("D" ,  2)); 

        while(!pq.isEmpty()){
            System.out.println(pq.peek().name + " -> " + pq.peek().rank); //O(1)
            pq.remove(); //O(log n)
        }
    }
}


------------------------------------------------------------------ Heap and its Operation ----------------------------------------------------------------------------

import java.util.*;

public class HeapBasic {

    static class Heap {
        ArrayList<Integer> arr = new ArrayList<>();

        // insertion

        public void add(int data){ // O(log n)
            //add at last index 
            arr.add(data);

            int x = arr.size()-1;  // x is child index
            int par =(x-1)/2; // parent index

            while(arr.get(x) < arr.get(par)){ // O(log n)
                //swap
                int temp = arr.get(x);
                arr.set(x, arr.get(par));
                arr.set(par, temp);

                x= par;
                par=(x-1)/2;
            }
        }

        public int peek(){
            return arr.get(0);
        }

        // deletion
        private void heapify(int i){
            int left = 2*i+1;
            int right = 2*i+2;
            int minIdx = i;
            if(left < arr.size() && arr.get(minIdx)> arr.get(left)){
                minIdx = left;
            }
            if(right < arr.size() && arr.get(minIdx)> arr.get(right)){
                minIdx = right;
            }

            if(minIdx != i){
                //swap
                int temp = arr.get(i);
                arr.set(i, arr.get(minIdx));
                arr.set(minIdx, temp);

                heapify(minIdx);
            }
        }
        
        public int remove(){
            int data = arr. get(0);
            
            // swap 
            int temp = arr.get(0);
            arr.set(0, arr.get(arr.size()-1));
            arr.set(arr.size()-1, temp);

            // remove last 
            arr.remove(arr.size()-1);
            
            // heapify
            heapify(0);
            return data;
        }

        public boolean isEmpty(){
            return arr.size() ==0;
        }
    }

    public static void main(String[] args) {
        Heap h = new Heap();
        h.add(3);
        h.add(4);
        h.add(1);
        h.add(5);

        while(!h.isEmpty()){
            System.out.println(h.peek());
            h.remove();
        }
    }
}

------------------------------------------------------------------ Heap sort ----------------------------------------------------------------------------

import java.util.*;

public class HeapBasic {

    public static void heapify(int arr[], int i, int size){
        int left = 2*i+1;
        int right = 2*i+2;
        int maxIdx = i;
        if(left < size && arr[left] > arr[maxIdx]){
            maxIdx = left;
        }
        if(right < size && arr[right]> arr[maxIdx]){
            maxIdx = right;
        }

        if(maxIdx != i){
            //swap
            int temp = arr[i];
            arr[i] = arr[maxIdx];
            arr[maxIdx]= temp;

            heapify(arr, maxIdx,size);
        }
    }

    public static void heapSort(int arr[]){  // tc-O(n logn)
        // build maxheap
        int n = arr.length;
        for (int  i=n/2; i>=0;i--){
            heapify(arr,i,n);
        }

         //push lasgest element at end
         for(int  i=n-1;i>0;i--){
            //swap
            int temp =arr[0];
            arr[0] =arr[i];
            arr[i] = temp;

            heapify(arr,0,i);
         }
    }     
    
    public static void main(String[] args) {
       int arr[]={1, 2, 4, 5, 3};
       heapSort(arr);

       for(int i=0; i<arr.length;i++){
        System.out.print(arr[i] + "  ");
       }
       System.out.println();
    }
}

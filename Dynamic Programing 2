public class Dp2 {

    // by recursion  tc = O(2^n)
    public static int knapsack(int val[], int wt[], int w, int n){
        if(w ==0 || n == 0){
            return 0;
        }

        if(wt[n-1] <= w){

            //include
            int ans1 = val[n-1] +knapsack(val, wt, w - wt[n-1], n-1);

            // excluded
            int ans2 = knapsack(val, wt, w, n-1);
            return Math.max(ans1 , ans2);
        }else{ 
            // not valid
            return knapsack(val, wt, w, n-1);
        }
    }

    // by memoization  tc = O(n*w)
    public static int knapsackMemoization(int val[], int wt[], int w, int n,int dp[][]){
        if(w ==0 || n == 0){
            return 0;
        }

        if(dp[n][w] != -1){
            return dp[n][w];
        }

        if(wt[n-1] <= w){

            //include
            int ans1 = val[n-1] +knapsackMemoization(val, wt, w - wt[n-1], n-1,dp);

            // excluded
            int ans2 = knapsackMemoization(val, wt, w, n-1,dp);
            dp[n][w] = Math.max(ans1, ans2);
            return dp[n][w];
        }else{
            // not valid
            dp[n][w]= knapsackMemoization(val, wt, w, n-1,dp);
            return dp[n][w];
        }
    }

    public static void print(int dp[][]){
        for(int i=0; i< dp.length; i++){
            for(int j =0; j< dp[0].length; j++){
                System.out.print( dp [i][j] + " ");
            }
            System.out.println();
        }
    }

    // by tabulation
    public static int knapsackTabulation(int val[], int wt[], int w){
        int n = val.length;
        int dp[][]= new int[n+1][w+1];
        for(int i=0; i<dp.length; i++){
            dp[i][0] = 0;
        }
        for(int j=0; j < dp[0].length; j++){
            dp[0][j] = 0 ;
        }

        for(int i=1; i<n+1; i++){
            for(int j=1; j<w+1; j++){
                int v = val[i-1];
                int W = wt[i-1];
                if(W <= j){
                    // valid
                    int incProfit = v + dp[i-1][j-W];
                    int excProfit = dp[i-1][j];
                    dp[i][j] = Math.max(incProfit, excProfit);
                }else{
                    int excProfit = dp[i-1][j];
                    dp[i][j] = excProfit;
                }
            }
        }
        print(dp);
        return dp[n][w];
    }


    public static void main(String[] args) {
        int val[]= { 15,14,10,45,30};
        int wt[] = {2,5,1,3,4};
        int w = 7;
        int dp[][] = new int[val.length+1][w+1];
        for(int i=0; i < dp.length; i++){
            for(int j=0; j < dp[0].length; j++){
                dp[i][j] =-1;
            }
        }
        System.out.println(knapsack(val, wt, w,val.length));
        System.out.println(knapsackMemoization(val, wt, w, val.length, dp));
        System.out.println(knapsackTabulation(val, wt, w));
    }
}


------------------------------------------------------------------ Target sum subset ------------------------------------------------------------------

public class Dp2 {

    public static void print(boolean dp[][]){
        for(int i=0; i< dp.length; i++){
            for(int j =0; j< dp[0].length; j++){
                System.out.print( dp [i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    public static boolean targetSumSubset(int arr[], int sum){
        int n  = arr.length;
        boolean dp[][] = new boolean[n+1][sum+1];
        for(int i=0; i<n+1; i++){
            dp[i][0] = true;
        }

        for(int i=1; i<n+1; i++){
            for(int j=1; j<sum+1; j++){
                // include
                int v = arr[i-1];
                if(v <= j && dp[ i-1][j-v] == true){
                    dp[ i][j] = true;
                }

                // excluded
                if(dp[ i-1][j] == true){
                    dp[ i][j] = true;
                }
            }
        }
        print(dp);
        return dp[n][sum];
    }

    public static void main(String[] args) {
        int arr[] = { 4, 2, 7, 1, 3};
        int sum = 10;
        System.out.println(targetSumSubset(arr, sum));
    }
}


---------------------------------------------------------------------- unbounded knapsack --------------------------------------------------------------------


public class Dp2 {

    public static void print(int dp[][]){
        for(int i=0; i< dp.length; i++){
            for(int j =0; j< dp[0].length; j++){
                System.out.print( dp [i][j] + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    // by tabulation
    public static int knapsackTabulation(int val[], int wt[], int w){
        int n = val.length;
        int dp[][]= new int[n+1][w+1];
        for(int i=0; i<dp.length; i++){
            dp[i][0] = 0;
        }
        for(int j=0; j < dp[0].length; j++){
            dp[0][j] = 0 ;
        }

        for(int i=1; i<n+1; i++){
            for(int j=1; j<w+1; j++){
                int v = val[i-1];
                int W = wt[i-1];
                if(W <= j){
                    // valid
                    int incProfit = v + dp[i][j-W];
                    int excProfit = dp[i-1][j];
                    dp[i][j] = Math.max(incProfit, excProfit);
                }else{
                    int excProfit = dp[i-1][j];
                    dp[i][j] = excProfit;
                }
            }
        }
        print(dp);
        return dp[n][w];
    }


    public static void main(String[] args) {
        int val[]= { 15,14,10,45,30};
        int wt[] = {2,5,1,3,4};
        int w = 7;
        int dp[][] = new int[val.length+1][w+1];
        for(int i=0; i < dp.length; i++){
            for(int j=0; j < dp[0].length; j++){
                dp[i][j] =-1;
            }
        }
        System.out.println(knapsackTabulation(val, wt, w));
    }
}

output : 
0 0 0 0 0 0 0 0 
0 0 15 15 30 30 45 45
0 0 15 15 30 30 45 45
0 10 20 30 40 50 60 70
0 10 20 45 55 65 90 100
0 10 20 45 55 65 90 100

100

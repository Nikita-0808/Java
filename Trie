
-------------------------------------------------------------------------------------- creation of trie and basic operation( insert , search) ---------------------------------------------------------------------------

public class TrieBasic {

    // creation
    static class Node {
        Node children[] = new Node[26];
        boolean eow = false;

        Node(){
            for(int i=0;i<26; i++){
                children[i] = null;
            }
        }  
    }

    public static Node root = new Node();

    //Insertion
    public static void insert(String word){  // O(L)
        Node curr = root;
        for(int level =0;level<word.length();level++){
            int idx = word.charAt(level) - 'a';
            if(curr.children[idx] == null){
                curr.children[idx] = new Node();
            }
            curr = curr.children[idx];
        }
        curr.eow = true;
    }

    //search
    public static boolean search (String key){
        Node curr = root;
        for(int level =0;level<key.length();level++){
            int idx = key.charAt(level) - 'a';
            if(curr.children[idx] == null){
                return false;
            }
            curr = curr.children[idx];
        }
        return curr.eow == true;
    }
    public static void main(String[] args) {
        String word[] = {"the", "a", "there","their","any","thee"};
        for(int i=0 ; i<word.length; i++){
            insert(word[i]);
        }

        System.out.println(search("thee"));
        System.out.println(search("thor"));
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Problem : word break problem
given an input string and a dictionary of words, find out if the input string can be broken into space - saperated sequence of dictionary word 

public class TrieBasic {

    static class Node {
        Node children[] = new Node[26];
        boolean eow = false;

        Node(){
            for(int i=0;i<26; i++){
                children[i] = null;
            }
        }  
    }

    public static Node root = new Node();

    public static void insert(String word){  // O(L)
        Node curr = root;
        for(int level =0;level<word.length();level++){
            int idx = word.charAt(level) - 'a';
            if(curr.children[idx] == null){
                curr.children[idx] = new Node();
            }
            curr = curr.children[idx];
        }
        curr.eow = true;
    }

    public static boolean search (String key){
        Node curr = root;
        for(int level =0;level<key.length();level++){
            int idx = key.charAt(level) - 'a';
            if(curr.children[idx] == null){
                return false;
            }
            curr = curr.children[idx];
        }
        return curr.eow == true;
    }

    public static boolean wordBreak(String key){
        // base case
        if(key.length()==0){
            return true;
        }
        for(int i=1; i<=key.length();i++){
            //SubString(0,i)
            if(search(key.substring(0,i)) && wordBreak(key.substring(i))){
                return true;
            }
        }
        return false;
    }
    
    public static void main(String[] args) {
        String arr[] ={ "i","like","sam","samsung","mobile","ice"};
        for(int i=0 ; i<arr.length; i++){
            insert(arr[i]);
        }

        String key = "ilikesamsung";
        System.out.println(wordBreak(key));            
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Problem : Prefix problem
Find the Shortest unique prefix for every word in agiven list. assume no word is prefix of another

public class TrieBasic {

    static class Node {
        Node children[] = new Node[26];
        boolean eow = false;
        int freq;

        Node(){
            for(int i=0;i<children.length; i++){
                children[i] = null;
            }
            freq = 1;
        }  
    }

    public static Node root = new Node();

    public static void insert(String arr){  // O(L)
        Node curr = root;
        for(int level =0;level<arr.length();level++){
            int idx = arr.charAt(level) - 'a';
            if(curr.children[idx] == null){
                curr.children[idx] = new Node();
            }else{
                curr.children[idx].freq++;
            }
            curr = curr.children[idx];
        }
        curr.eow = true;

    }

    public static void findPrefix(Node root, String ans){  // O(L) longest word
        if(root == null){
            return;
        }
        if(root.freq ==1){
            System.out.println(ans);
            return;
        }
        for (int i=0; i<root.children.length;i++){
            if(root.children[i] != null){
                findPrefix(root.children[i], ans+(char)(i+'a'));
            }
        }
    }
    
    public static void main(String[] args) {
        String arr[] ={ "zebra","dog","duck","dove"};
        for(int i=0 ; i<arr.length; i++){
            insert(arr[i]);
        }

        root.freq = -1;
        findPrefix(root, "");          
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Problem : Prefix problem

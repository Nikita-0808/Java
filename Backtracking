
QUESTION 1: Create an empty array and fill recursively upto base condition ,while returning (-2) each element.

public class Backtracking {
    public static void printArr(int arr[]){
        for(int i=0; i< arr.length;i++){
            System.out.print(arr[i]+ " ");
        }
        System.out.println();
    }

    public static void changeArray(int arr[], int i, int val){
        // base case
        if(i == arr.length){
            printArr(arr);
            return;
        }

        // recursion
        arr[i]=val;
        changeArray(arr,i+1,val+1);
        arr[i]= arr[i]-2;

    }
    public static void main(String[] args) {
        int arr[]= new int[5];
        changeArray(arr,0,1);
        printArr(arr);
    }
}

output : 
1 2 3 4 5 
-1 0 1 2 3 


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 2: FIND SUBSET  ( find & print all the subsets of a given string)

public class Backtracking {
    public static void findSubset(String str, String ans, int i){
        //base case
        if(i== str.length()){
            if(ans.length()== 0){
                System.out.println("null");
            }
            System.out.print(ans + "   ");
            return;
        }
        // yes choice
        findSubset(str, ans+str.charAt(i), i+1);
        // no choice
        findSubset(str, ans, i+1);
    }
    public static void main(String[] args) {
        String str= "abc";
        findSubset(str, "", 0);
        
    }
}

output : 
abc   ab   ac   a   bc   b   c   null


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

QUESTION 3: FIND PERMUTATION ( find & print all the Permutation of a given string)

public class Backtracking {
    public static void findPermutation(String str, String ans){
        //base case
        if(str.length()==0){
            System.out.print(ans + "   ");
            return;
        }
        // recursion
        for(int i=0;i<str.length();i++){
            char curr = str.charAt(i);
            String newstr = str.substring(0,i)+ str.substring(i+1);
            findPermutation(newstr, ans+curr);
        }
    }
    public static void main(String[] args) {
        String str= "abc";
        findPermutation(str, "");
    }
}

output : 
abc   acb   bac   bca   cab   cba   


--------------------------------------------------------------------------------------------------------------------------------------

QUESTION 4 : N QUEENS PROBLEM (place N queens on an NxN chessboard such that no 2 queens can attack each other )

public class Backtracking {

    public static boolean isSafe(char board[][], int row, int col){
        // vertical up
        for( int i=row-1;i>=0;i--){
            if( board[i][col]=='Q'){
                return false;
            }  
        }

        // left up diagonal
        for(int i=row-1, j=col-1; i>=0 && j>=0; i--,j--){
            if( board[i][j]=='Q'){
                return false;
            }  
        }

        // right up diagonal
        for(int i=row-1, j=col+1; i>=0 && j<board.length; i--,j++){
            if( board[i][j]=='Q'){
                return false;
            }  
        }
        return true;
    }

    public static void nQueens(char board[][],int row){
        //base case
        if(row == board.length ){
            printBoard(board);
            return;
        }
        //column loop
        for(int j=0;j<board.length;j++){
           if(isSafe(board, row, j)){
            board[row][j]='Q' ;
            nQueens(board, row+1);
            board[row][j]='x' ;
           }
        }
    }

    public static void printBoard(char board[][]){
        System.out.println("-------------------------chess board-----------------------------");
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board.length;j++){
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
    }
}
    public static void main(String args[]) {
        int n=4;
        char board[][]= new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='x' ;
            }       
       }
       nQueens(board, 0);
    }  
}


--------------------------------------------------------------------------------------------------------------------------------

QUESTION 5 : GRID WAYS (Find number of ways to reach from (0,0) to (N-1,m-1) in a NxM grid , allowed moves- right ot down)

public class Backtracking {
    public static int gridWays(int i, int j, int n, int m){
        //base case
        if(i == n-1 && j == m-1){ // count for last cell
            return 1;
        }
        else if(i ==n || j==m){ // boundary cross condition
            return 0;
        }

        // recursion
        int w1= gridWays(i+1, j, n, m);
        int w2= gridWays(i, j+1, n, m);
        return w1 + w2;

    }
    public static void main(String[] args) {
        int n=3, m=3;
        System.out.println(gridWays(0, 0, n, m));
    }
}


-------------------------------------------------------------------------------------------------------------------------------------

QUESTION 6 : SUDOKU SOLVER (Write a function to solve sudoku)

public class Backtracking {

    public static boolean isSafe( int sudoku[][],int row, int col, int digit ){
        // column
        for(int i=0; i<=8; i++){
            if(sudoku[i][col]== digit){
                return false;
            }
        }
        // row
        for(int j=0; j<=8; j++){
            if(sudoku[row][j]== digit){
                return false;
            }
        }
        // grid
        int sr= (row/3)*3;
        int sc= (col/3)*3;
        for(int i=sr ; i<sr+3; i++){
            for(int j=sc; j<sc+3; j++){
                if(sudoku[i][j]== digit){
                    return false;
                }
            }
        }
        return true;
    }

    public static boolean sudokuSolver(int sudoku[][], int row, int col){
       //base case
       if(row ==9 && col == 0){
        return true;
       }
    
       //recursion
       int nextRow= row, nextCol=col+1;
       if(col+1 == 9){
        nextRow = row+1;
        nextCol = 0;
       }

       if(sudoku[row][col]!=0){
        return sudokuSolver(sudoku, nextRow, nextCol);
       }

        for(int digit=1; digit<=9; digit++){
            if(isSafe(sudoku, row, col, digit)){
                sudoku[row][col]=digit;
                if(sudokuSolver(sudoku, nextRow, nextCol)){
                    return true;
                }
                sudoku[row][col]=0;
            }
        }
        return false;
    }

    public static void printSudoku( int sudoku[][]){
        for(int i=0; i<9; i++){
            for(int j=0; j<9; j++){
                System.out.print(sudoku[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        int sudoku[][]={{0, 0, 8, 0, 0, 0, 0, 0 ,0 },
        {4, 9, 0, 1, 5, 7, 0, 0, 2},
        {0, 0, 3, 0, 0, 4, 1, 9, 0},
        {1, 8, 5, 0, 6, 0, 0, 2, 0},
        {0, 0, 0, 0, 2, 0, 0, 6, 0},
        {9, 6, 0, 4, 0, 5, 3, 0, 0},
        {0, 3, 0, 0, 7, 2, 0, 0, 4},
        {0, 4, 9, 0, 3, 0, 0, 5, 7},
        {8, 2, 7, 0, 0, 9, 0, 1, 3}};

        if(sudokuSolver(sudoku, 0, 0)){
            System.out.println(" solution exist");
            printSudoku(sudoku);
        }
        else{
            System.out.println("solution does not exist");
        }
    }
}

output : 
solution exist
2 1 8 3 9 6 7 4 5 
4 9 6 1 5 7 8 3 2
7 5 3 2 8 4 1 9 6
1 8 5 7 6 3 4 2 9
3 7 4 9 2 8 5 6 1
9 6 2 4 1 5 3 7 8
5 3 1 6 7 2 9 8 4 
6 4 9 8 3 1 2 5 7
8 2 7 5 4 9 6 1 3






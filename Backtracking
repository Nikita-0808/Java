
QUESTION 1: Create an empty array and fill recursively upto base condition ,while returning (-2) each element.

public class Backtracking {
    public static void printArr(int arr[]){
        for(int i=0; i< arr.length;i++){
            System.out.print(arr[i]+ " ");
        }
        System.out.println();
    }

    public static void changeArray(int arr[], int i, int val){
        // base case
        if(i == arr.length){
            printArr(arr);
            return;
        }

        // recursion
        arr[i]=val;
        changeArray(arr,i+1,val+1);
        arr[i]= arr[i]-2;

    }
    public static void main(String[] args) {
        int arr[]= new int[5];
        changeArray(arr,0,1);
        printArr(arr);
    }
}

output : 
1 2 3 4 5 
-1 0 1 2 3 


----------------------------------------------------------------------------------------------------------------------------------------

QUESTION 2: FIND SUBSET  ( find & print all the subsets of a given string)

public class Backtracking {
    public static void findSubset(String str, String ans, int i){
        //base case
        if(i== str.length()){
            if(ans.length()== 0){
                System.out.println("null");
            }
            System.out.println(ans);
            return;
        }
        // yes choice
        findSubset(str, ans+str.charAt(i), i+1);
        // no choice
        findSubset(str, ans, i+1);
    }
    public static void main(String[] args) {
        String str= "abc";
        findSubset(str, "", 0);
        
    }
}

output : 
abc   ab   ac   a   bc   b   c   null



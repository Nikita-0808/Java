# Problem : Activity selection
you are given n activities with their start and end time.select the minimum number of activities thatr can be performed by a single person, assuming that a person can only work on a single activity at a time.
Activities are sorted according to end time.
start[] = {10,12,20}
end[] = {20.25.30}
ans = 2(A0,A2)
____________________X___________________X______________________

public class GreedyApproach {
    public static void main(String[] args) {
        int start[] = {1, 3, 0, 5, 8, 5};
        int end[] = {2, 4, 6, 7, 9, 9 };

        int maxAct = 0;
        ArrayList<Integer> ans = new ArrayList<>();

        // 1st activity
        maxAct = 1;
        ans.add(0);
        int lastEnd = end[0];
        for(int i=1; i<end.length;i++){
            if(start[i] >= lastEnd){
                // activity select
                maxAct++;
                ans.add(i);
                lastEnd = end[i];
            }
        }
        
        System.out.println("maximum activity = " + maxAct);
        for(int i=0; i< ans.size(); i++){
            System.out.print("A"+ ans.get(i) + "  ");
        }
        System.out.println();
    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Problem : Activity selection
you are given n activities with their start and end time.select the minimum number of activities thatr can be performed by a single person, assuming that a person can only work on a single activity at a time.
Activities are not sorted
start[] = {3, 1, 5, 5, 8, 0}
end[] = {4, 2, 7, 9, 9, 6}
ans = 4 (A1, A0, A2, A4)

if array is not sorted

import java.util.*;

public class GreedyApproach {
    public static void main(String[] args) {
        int start[] = {3, 1, 5, 5, 8, 0};
        int end[] = {4, 2, 7, 9, 9, 6};

        //sorting
        int activities[][] = new int [start.length][3];
        for(int i=0; i<start.length;i++){
            activities[i][0] =i;
            activities[i][1] = start[i];
            activities[i][2] = end [i];
        }

        //lambda function - shortform
        Arrays.sort(activities, Comparator.comparingDouble(o -> o[2]));

        int maxAct = 0;
        ArrayList<Integer> ans = new ArrayList<>();

        // 1st activity
        maxAct = 1;
        ans.add(activities[0][0]);
        int lastEnd = activities[0][2];
        for(int i=1; i<end.length;i++){
            if(activities[i][1] >= lastEnd){
                // activity select
                maxAct++;
                ans.add(activities[i][0]);
                lastEnd = activities[i][2];
            }
        }
        
        System.out.println("maximum activity = " + maxAct);
        for(int i=0; i< ans.size(); i++){
            System.out.print("A"+ ans.get(i) + "  ");
        }
        System.out.println();
    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Problem : Fractional Knapsack
Given the weights and value of N items, put these items in a Knapsack of capacity w to get the maximum total value in the knapsack

import java.util.*;
public class GreedyApproach {

    public static void main(String[] args) {
        int val[] = {60 , 100, 120};
        int weight[] = {10, 20, 30};
        int w = 50;
        int finalVal =0;

        double ratio[][] = new double[val.length][2];
        //0th col -> index , 1st col-> ratio

        for(int i=0;i<val.length;i++){
            ratio[i][0] =i;
            ratio[i][1] = val[i]/(double)weight[i];
        }
        
        Arrays.sort(ratio, Comparator.comparingDouble(o -> o[1]));  // sort in ascending order
        int capacity = w;
        for(int i=ratio.length-1 ; i>=0; i--){
            int idx = (int)ratio[i][0];
            if(capacity >= weight[idx]){
                finalVal += val[idx];
                capacity -= weight[idx];
            }else{
                //include fractional item
                finalVal += (ratio[i][1]*capacity);
                capacity =0;
                break;
            }
        }
        System.out.println("final value = " + finalVal);
    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Problem min absolute Difference pair 
given two arrays A and B of equal length n. pair each element of array A to an element of array B, such that sum S of absolute differences of all the pair is minimum.

import java.util.*;
public class GreedyApproach {

    public static void main(String[] args) {
        int A[] = {4,8,1,7};
        int B[] = {2,3,6,5};
        Arrays.sort(A);
        Arrays.sort(B);
        
        int minDiff = 0;
        for(int i=0;i<A.length; i++){
            minDiff += Math.abs(A[i]-B[i]);
        }

        System.out.println("minimum absolute difference of pairs = " + minDiff);
    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Problem : Max Length Chain of Pairs
You are given n pairs of numbers. In every pair, the first number is always smaller than the secind number. A pair (c, d) can come after pair (a,b) if b<c.
Find the longest chain which can be formed from a given set of pairs.


import java.util.*;
public class GreedyApproach {

    public static void main(String[] args) {
        int pairs[][]= {{5,24},{39,60},{5, 28},{27,40},{50,90}};

        Arrays.sort(pairs, Comparator.comparingDouble( o -> o[1]));

        int chainLen =1;
        int chainEnd = pairs[0][1]; //last selected pair end //chain end

        for(int i=1; i<pairs.length; i++){
            if(pairs[i][0]> chainEnd){
                chainLen++;
                chainEnd = pairs[i][1];
            }
        }
        System.out.println(" max length of cahin = " + chainLen);
    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# problem : Indian Coins
we are given an infinite supply of denominations [1, 2, 5, 10, 20 ,50 , 100, 500, 2000]. find minimum no of coins/ notes to make change for a value V.

import java.util.*;

public class GreedyApproach {

    public static void main(String[] args) {
       Integer coins[] = { 1, 2 , 5, 10, 20, 50, 100, 500, 2000 };
        Arrays.sort(coins, Comparator.reverseOrder());
         int count = 0;
         int amount = 590;
         ArrayList<Integer> ans = new ArrayList<>();

         for(int i=0;i<coins.length; i++){
            if(coins[i] <= amount){
                while(coins[i]<= amount){
                    count ++;
                    ans.add(coins[i]);
                    amount -= coins[i];
                }
            }
         }

         System.out.println(" Total (minimum) coins used = " + count);

         for(int i=0; i<ans.size();i++){
            System.out.print(ans.get(i) + "  ");
         }
         System.out.println();
    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Problem : Job Sequencing problem
given an array ofb jobs where every job has a deadline and profit if the job if finished before the deadline. It is also given that every job takes a single unit of time. so the minimum
posssible deadline for any job is 1. Maximize the total profit if only one job can be scheduled at a time.

import java.util.*;

public class GreedyApproach {
    static class Job {
        int deadline;
        int profit;
        int id; // 0(A) , 1(B) , 3(C) 

        public Job(int i , int d, int p){
            id =i;
            deadline = d;
            profit = p;
        }
    }

    public static void main(String[] args) {
        int jobsInfo[][] = {{4,20},{1,10},{1,40},{1,30}};

        ArrayList<Job> jobs = new ArrayList<>();

        for (int  i=0; i<jobsInfo.length; i++){
            jobs.add(new Job(i, jobsInfo[i][0], jobsInfo[i][1]));
        }

        // Collections.sort(jobs, (obj1, obj2) -> obj1.profit-obj2.profit);  // ascending order
        Collections.sort(jobs, (obj1, obj2) -> obj2.profit-obj1.profit);  // descending order

        ArrayList<Integer> seq = new ArrayList<>();
        int time =0;
        for(int i=0; i<jobs.size(); i++){
            Job curr = jobs.get(i);
            if(curr.deadline> time){
                seq.add(curr.id);
                time++;
            }
        }

        System.out.println(" maximum jobs = " + seq.size());
        for(int i =0 ;i<seq.size();i++){
            System.out.print(seq.get(i) + "  ");
        }
        System.out.println();
    } 
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Problem : Chocola problem
we are given a bar of chocolate composed of mxn square pieces. One should break the chocolate into single square. Each break of a part of chocolate is charged a cost expressed by a positive integer.
This cost does not depend on the size of the part that is being broken but only depends on the line the break goes along. Let us denote the cost of breaking along consecutive vertical lines with 
x1,x2,x3,....xm-1 and along horizontal line with y1,y2,y3,.... yn-1. Compute  the minimal cost of breaking the whole chocolate into single square.


# Problem : Activity selection
you are given n activities with their start and end time.select the minimum number of activities thatr can be performed by a single person, assuming that a person can only work on a single activity at a time.
Activities are sorted according to end time.
start[] = {10,12,20}
end[] = {20.25.30}
ans = 2(A0,A2)
____________________X___________________X______________________

public class GreedyApproach {
    public static void main(String[] args) {
        int start[] = {1, 3, 0, 5, 8, 5};
        int end[] = {2, 4, 6, 7, 9, 9 };

        int maxAct = 0;
        ArrayList<Integer> ans = new ArrayList<>();

        // 1st activity
        maxAct = 1;
        ans.add(0);
        int lastEnd = end[0];
        for(int i=1; i<end.length;i++){
            if(start[i] >= lastEnd){
                // activity select
                maxAct++;
                ans.add(i);
                lastEnd = end[i];
            }
        }
        
        System.out.println("maximum activity = " + maxAct);
        for(int i=0; i< ans.size(); i++){
            System.out.print("A"+ ans.get(i) + "  ");
        }
        System.out.println();
    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Problem : Activity selection
you are given n activities with their start and end time.select the minimum number of activities thatr can be performed by a single person, assuming that a person can only work on a single activity at a time.
Activities are not sorted
start[] = {3, 1, 5, 5, 8, 0}
end[] = {4, 2, 7, 9, 9, 6}
ans = 4 (A1, A0, A2, A4)

if array is not sorted

import java.util.*;

public class GreedyApproach {
    public static void main(String[] args) {
        int start[] = {3, 1, 5, 5, 8, 0};
        int end[] = {4, 2, 7, 9, 9, 6};

        //sorting
        int activities[][] = new int [start.length][3];
        for(int i=0; i<start.length;i++){
            activities[i][0] =i;
            activities[i][1] = start[i];
            activities[i][2] = end [i];
        }

        //lambda function - shortform
        Arrays.sort(activities, Comparator.comparingDouble(o -> o[2]));

        int maxAct = 0;
        ArrayList<Integer> ans = new ArrayList<>();

        // 1st activity
        maxAct = 1;
        ans.add(activities[0][0]);
        int lastEnd = activities[0][2];
        for(int i=1; i<end.length;i++){
            if(activities[i][1] >= lastEnd){
                // activity select
                maxAct++;
                ans.add(activities[i][0]);
                lastEnd = activities[i][2];
            }
        }
        
        System.out.println("maximum activity = " + maxAct);
        for(int i=0; i< ans.size(); i++){
            System.out.print("A"+ ans.get(i) + "  ");
        }
        System.out.println();
    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Problem : Fractional Knapsack
Given the weights and value of N items, put these items in a Knapsack of capacity w to get the maximum total value in the knapsack

import java.util.*;
public class GreedyApproach {

    public static void main(String[] args) {
        int val[] = {60 , 100, 120};
        int weight[] = {10, 20, 30};
        int w = 50;
        int finalVal =0;

        double ratio[][] = new double[val.length][2];
        //0th col -> index , 1st col-> ratio

        for(int i=0;i<val.length;i++){
            ratio[i][0] =i;
            ratio[i][1] = val[i]/(double)weight[i];
        }
        
        Arrays.sort(ratio, Comparator.comparingDouble(o -> o[1]));  // sort in ascending order
        int capacity = w;
        for(int i=ratio.length-1 ; i>=0; i--){
            int idx = (int)ratio[i][0];
            if(capacity >= weight[idx]){
                finalVal += val[idx];
                capacity -= weight[idx];
            }else{
                //include fractional item
                finalVal += (ratio[i][1]*capacity);
                capacity =0;
                break;
            }
        }
        System.out.println("final value = " + finalVal);
    }
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Problem min absolute Difference pair 
given two arrays A and B of equal length n. pair each element of array A to an element of array B, such that sum S of absolute differences of all the pair is minimum.


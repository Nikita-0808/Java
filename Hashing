
----------------------------------------------------------------------- Hashing and its operation --------------------------------------------------------------------------------

import java.util.HashMap;

public class HashingBasic {
    public static void main(String[] args) {

        // create
        HashMap<String, Integer> hm = new HashMap<>();

        // insert
        hm.put("India", 100);
        hm.put("China", 150);
        hm.put("us", 50);

        System.out.println(hm);

        // get
        int population = hm.get("India");
        System.out.println(population);

        // containsKey
        System.out.println(hm.containsKey("India"));

        // remove
        System.out.println(hm.remove("China"));
        System.out.println(hm);

        //size
        System.out.println(hm.size());

        // is empty
        System.out.println(hm.isEmpty());
        hm.clear();  // clear the whole hash table == empty
        System.out.println(hm.isEmpty());

    }
}


--------------------------------------------------------------------------- Creation of HashMap --------------------------------------------------------------------------------

import java.util.*;

  public class HashingBasic {
  
    public static void main(String[] args) {
        HashMap<String, Integer> hm = new HashMap<>();
        hm.put("india", 100);
        hm.put("china", 150);
        hm.put("us", 50);
        hm.put("Indonasia", 6);
        hm.put("nepal", 5);

        // Iterate
        Set<String> keys = hm.keySet();
        System.out.println(keys);

        for(String k : keys) {
            System.out.println("key = " + k +","+ "value = " + hm.get(k));
        }
    }
  }


--------------------------------------------------------------------------- Implementation of HashMap --------------------------------------------------------------------------------

import java.util.*;
import java.util.LinkedList;
public class HashingBasic {
    static class HashMap<K,V>{ //generic
        private class Node{
            K key;
            V value;
            public Node(K key, V value){
                this.key = key;
                this.value = value;
            }
        }

        private int n; // size
        private int N;
        private LinkedList<Node> buckets[]; // N = buckets.length

        @SuppressWarnings("unchecked")
        public HashMap() {
            this.N = 4;
            this.buckets = new LinkedList[4];
            for(int i=0; i<4 ;i++){
                this.buckets[i] = new LinkedList<>();
            }
        }

        private int searchInLL(K key,int bi){
            LinkedList<Node> ll = buckets[bi];
            int di = 0;

            for(int i=0; i<ll.size(); i++){
                Node node= ll.get(i);
                if(node.key == key){
                    return di;
                }
                di++;
            }
            return-1;
        }

        private int hashFunction(K key){
            int hc = key.hashCode();
            return Math.abs(hc) % N;
        }

        @SuppressWarnings("unchecked")
        private void rehash(){
            LinkedList<Node> oldBuck[] = buckets;
            buckets = new LinkedList[N*2];
            N= 2*N;
            for(int i=0; i<buckets.length;i++){
                buckets[i] = new LinkedList<>();
            }

            //nodes -> add in bucket
            for(int i=0; i<oldBuck.length;i++){
                LinkedList<Node> ll = oldBuck[i];
                for(int j=0; j<ll.size();j++){
                    Node node = ll.remove();
                    put(node.key, node.value);
                }
            }
        }

        public void put (K key, V value){
            int bi = hashFunction(key);
            int di = searchInLL(key, bi); // valid -1

            if (di != -1) {
                Node node = buckets[bi].get(di);
                node.value= value;
            } else{
                buckets[bi].add(new Node(key,value));
                n++;
            }

            double lambda = (double)n/N;
            if(lambda > 2.0){
                rehash();
            }
        }

        public boolean cointainsKey(K key, V value){
            int bi = hashFunction(key);
            int di = searchInLL(key, bi); // valid -1

            if (di != -1) {
               return true;
            } else{
                return false;
            }
        }

        public V remove(K key){
            int bi = hashFunction(key);
            int di = searchInLL(key, bi); 

            if (di != -1) {
                Node node = buckets[bi].remove(di);
                n--;
                return node.value;
            } else{
                return null;
            }  
        }

        public V get(K key){
            int bi = hashFunction(key);
            int di = searchInLL(key, bi); 

            if (di != -1) {
                Node node = buckets[bi].get(di);
                return node.value;
            } else{
                return null;
            }
        }

        public ArrayList<K> keySet(){
            ArrayList<K> keys = new ArrayList<>();
            for(int i=0; i<buckets.length;i++){
                LinkedList<Node> ll = buckets[i];
                for(Node node : ll){
                    keys.add(node.key);
                }
            }
            return keys;
        }

        public boolean isEmpty(){
            return n==0;
        }
    }

    public static void main(String[] args) {
        HashMap<String,Integer> hm =new HashMap<>();
        hm.put("india", 100);
        hm.put("china", 150);
        hm.put("us", 50);
        hm.put("nepal", 5);

        ArrayList<String> keys = hm.keySet();
        for(String key : keys){
            System.out.println(key);
        }

        System.out.println(hm.get("india"));
        hm.remove("india");
        System.out.println(hm.get("india"));
    }
}


--------------------------------------------------------------------------- Linked HashMap --------------------------------------------------------------------------------

import java.util.*;

public class HashingBasic {

    public static void main(String[] args) {
        LinkedHashMap<String,Integer> lhm = new LinkedHashMap<>();
        lhm.put("india",100);
        lhm.put("china",150);
        lhm.put("US",50);

        HashMap<String,Integer> hm = new HashMap<>();
        hm.put("india",100);
        hm.put("china",150);
        hm.put("US",50);

        System.out.println(hm);
        System.out.println(lhm);
    }
}


--------------------------------------------------------------------------- TreeMap --------------------------------------------------------------------------------

import java.util.*;

public class HashingBasic {

    public static void main(String[] args) {
        TreeMap<String,Integer> tm = new TreeMap<>();
        tm.put("india",100);
        tm.put("china",150);
        tm.put("US",50);

        HashMap<String,Integer> hm = new HashMap<>();
        hm.put("india",100);
        hm.put("china",150);
        hm.put("US",50);

        System.out.println(hm);
        System.out.println(tm);
    }
}


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Problem : Majority Elements
Given an integer array of size n . Find all element that appears more than (n/3) times.

import java.util.*;
public class HashingBasic {

    public static void main(String[] args) {
        int arr[]={1,3,2,5,1,3,1,5,1};
        HashMap<Integer, Integer> map = new HashMap<>();

        for(int i=0; i<arr.length; i++){
            // shorthand for below code
            //map.put(arr[i],map.getOrdefault(arr[i],0)+1);
            if(map.containsKey(arr[i])){
                map.put(arr[i], map.get(arr[i])+1);
            }else{
                map.put(arr[i], 1);
            }
        }

        for(Integer key : map.keySet()){
            if(map.get(key)> arr.length/3){
                System.out.println(key);
            }
        }
    }
}


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Problem : Valid Anagram
Given two string s and t , return true if t is an anagram of s, and false otherwise. An anagram is a word or phrase formed by rearanging the letters of different word or phrase
typically using all the original letters exactly once

import java.util.*;
public class HashingBasic {

    public static boolean isAnagram(String s, String t){
        if(s.length() != t.length()){
            return false;
        }
        HashMap<Character, Integer> map = new HashMap<>();

        for(int i=0; i<s.length(); i++){
            char ch = s.charAt(i);
            map.put(ch, map.getOrDefault(s.charAt(i), 0)+1);
        }

        for(int i=0; i<t.length();i++){
            char ch = t.charAt(i);
            if(map.get(ch)!= null){
                if(map.get(ch)==1){
                    map.remove(ch);
                }else{
                    map.put(ch, map.get(ch)-1);
                }
            }else{
                return false;
            }
        }
        return map.isEmpty();
    }
    public static void main(String[] args) {
        String s ="race";
        String t = "care";

        System.out.println(isAnagram(s, t)); 
    }
}


----------------------------------------------------------------------------- Hash set ---------------------------------------------------------------------------------------------

import java.util.*;
public class HashingBasic {
    public static void main(String[] args) {
        HashSet<Integer> set = new HashSet<>();
        set.add(1);
        set.add(2);
        set.add(5);
        set.add(2);

        System.out.println(set);
        System.out.println(set.size());

        if(set.contains(2)){
            System.out.println("set contains 2");
        }
        set.remove(5);
        if(set.contains(5)){
            System.out.println("set contains 5");
        }
        set.clear();
        System.out.println(set.size());
        System.out.println(set.isEmpty()); 
    }
}


----------------------------------------------------------------------------- Iteration on Hashset ( using iterator) ---------------------------------------------------------------------------------------------

import java.util.*;
public class HashingBasic {
    public static void main(String[] args) {
        HashSet<String> cities = new HashSet<>();
        cities.add("delhi");
        cities.add("mumbai");
        cities.add("Noida");
        cities.add("bengaluru");

        Iterator it = cities.iterator();
        while(it.hasNext()){
            System.out.println(it.next());
        }
    }
}


----------------------------------------------------------------------------- Iteration on Hashset ( using Enhanced for loop) ---------------------------------------------------------------------------------------------

import java.util.*;
public class HashingBasic {
    public static void main(String[] args) {
        HashSet<String> cities = new HashSet<>();
        cities.add("delhi");
        cities.add("mumbai");
        cities.add("Noida");
        cities.add("bengaluru");

        for(String city :cities){
            System.out.println(city);
        }
    }
}


----------------------------------------------------------------------------- Linked Hashset ---------------------------------------------------------------------------------------------


import java.util.*;
public class HashingBasic {
    public static void main(String[] args) {
        HashSet<String> cities = new HashSet<>();
        cities.add("delhi");
        cities.add("mumbai");
        cities.add("Noida");
        cities.add("bengaluru");
        System.out.println(cities);

        LinkedHashSet<String> lhs = new LinkedHashSet<>();
        lhs.add("delhi");
        lhs.add("mumbai");
        lhs.add("Noida");
        lhs.add("bengaluru");
        System.out.println(lhs);
    }
}


----------------------------------------------------------------------------- Treeset ---------------------------------------------------------------------------------------------

import java.util.*;
public class HashingBasic {
    public static void main(String[] args) {
        HashSet<String> cities = new HashSet<>();
        cities.add("delhi");
        cities.add("mumbai");
        cities.add("Noida");
        cities.add("bengaluru");
        System.out.println(cities);

        LinkedHashSet<String> lhs = new LinkedHashSet<>();
        lhs.add("delhi");
        lhs.add("mumbai");
        lhs.add("Noida");
        lhs.add("bengaluru");
        System.out.println(lhs);

        TreeSet<String> ts = new TreeSet<>();
        ts.add("Delhi");
        ts.add("Mumbai");
        ts.add("Noida");
        ts.add("Bengaluru");
        System.out.println(ts);   
    }
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Problem : Count distinct element

import java.util.*;
public class HashingBasic {

    public static void main(String[] args) {
        int num[] ={4,3,2,5,6,7,3,4,2,1};
        HashSet<Integer> set = new HashSet<>();
        for(int i=0; i<num.length;i++){
            set.add(num[i]);
        }
        System.out.println("ans = " + set.size());
    }
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Problem : union and Intersection of two array

import java.util.*;
public class HashingBasic {

    public static void union(int arr1[], int arr2[]){
        HashSet<Integer> set = new HashSet<>();
        for(int i=0; i<arr1.length;i++){
            set.add(arr1[i]);
        }
        for(int i=0; i<arr2.length;i++){
            set.add(arr2[i]);
        }
        System.out.println("union = " + set.size());
    }

    public static void intersection(int arr1[], int arr2[]){
        HashSet<Integer> set = new HashSet<>();
        for(int i=0; i<arr1.length;i++){
            set.add(arr1[i]);
        }
        int count = 0;
        for(int i=0; i<arr2.length;i++){
            if(set.contains(arr2[i])){
                count++;
                set.remove(arr2[i]);
            }
        }
        System.out.println("Intersection = " + count);
    }

    public static void main(String[] args) {
        int arr1[] ={7,3,9};
        int arr2[]={6,3,9,2,9,4};
        union(arr1, arr2);
        intersection(arr1, arr2);
    }
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Problem : Find Itinerary of tickets

import java.util.*;
public class HashingBasic {

    public static String getStart(HashMap<String,String> tickets){
        HashMap<String , String> revMap =new HashMap<>();

        for(String key: tickets.keySet()){
            revMap.put(tickets.get(key), key);
        }

        for(String key : tickets.keySet()){
            if(!revMap.containsKey(key)){
                return key; // starting point
            }
        }
        return null;
    }

    public static void main(String[] args) {
       HashMap<String, String> tickets = new HashMap<>();
       tickets.put("Chennai", "Bengaluru");
       tickets.put("Mumbai", "Delhi");
       tickets.put("Goa", "Chennai");
       tickets.put("Delhi", "Goa");

       String start = getStart(tickets);
       System.out.print(start);
       for(String key : tickets.keySet()){
            System.out.print(" -> " + tickets.get(start));
            start = tickets.get(start);
        }
    }
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Problem : Largest subarray with 0 sum

import java.util.*;
public class HashingBasic {
    public static void main(String[] args) {  //O(n)
        int arr[]={15,-2,2,-8,1,7,10,23};
        HashMap<Integer,Integer> map = new HashMap<>();
        //(sum ,idx)

        int sum = 0;
        int len = 0;

        for(int j=0; j<arr.length;j++){
            sum += arr[j];
            if(map.containsKey(sum)){
                len = Math.max(len, j - map.get(sum));
            }else{
                map.put(sum, j);
            }
       }

       System.out.println("Largest subarray with sum as 0 -> " + len);  
    }
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Problem : subarray with sum equals to k

import java.util.*;
public class HashingBasic {
    public static void main(String[] args) {  //O(n)
        int arr[]={10,2,-2,-20,10};
        int k=-10;
        HashMap<Integer,Integer> map = new HashMap<>();
        //(sum ,count)

        map.put(0, 1);

        int sum = 0;
        int ans = 0;

        for(int j=0; j<arr.length;j++){  // O(n)
            sum += arr[j];
            if(map.containsKey(sum - k)){
                ans += map.get(sum -k);
            }
            map.put(sum, map.getOrDefault(sum, 0)+1);
            }
       System.out.println("subarray with sum equal to k -> " + ans);  
    }
}

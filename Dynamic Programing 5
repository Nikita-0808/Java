
----------------------------------------------------------- Wildcard Matching --------------------------------------------------------

public class Dp5 {

    public static boolean isMatch(String s , String p){
        int n = s.length();
        int m = p.length();

        boolean dp[][]= new boolean[n+1][m+1];

        //initialization

        dp[0][0] = true;

        for(int i=1; i<n+1; i++){
            dp[i][0] = false;
        }

        for(int j=1; j<m+1; j++){
            if(p.charAt(j-1) == '*'){
                dp[0][j] = dp[0][j-1];
            }
        }

        for(int i=1; i<n+1; i++){
            for(int j=1; j<m+1; j++){
                // case 1 = ith char == jth char || jth char  == ?
                if(s.charAt(i-1) == p.charAt(j-1) || p.charAt(j-1) == '?'){
                    dp[i][j] = dp[i-1][j-1];
                } else if(p.charAt(j-1) == '*'){
                    dp[i][j] = dp[i-1][j] || dp[i][j-1];
                }else{
                    dp[i][j] = false;
                }
            }
        }
        return dp[n][m];
    }
    public static void main(String[] args) {
        String s = " baaabab";
        String p = "*****ba*****ab";
        System.out.println(isMatch(s, p));
        
    }
}


--------------------------------------------------------------- Catalan's Number ---------------------------------------------------------


import java.util.*;

public class Dp5 {

    // by recursion
    public static int catalanRecursion(int n){
        if(n == 0 || n == 1){
            return 1;
        }
        int ans = 0;
        for(int i=0; i<n; i++){
            ans += catalanRecursion(i) * catalanRecursion(n-i-1);
        }
        return ans;
    }

    // by memoization
    public static int catalanMemoization(int n, int dp[]){
        if(n == 0 || n == 1){
            return 1;
        }

        if(dp[n]!= -1){
            return dp[n];
        }
        int ans = 0;
        for(int i=0; i<n; i++){
            ans += catalanMemoization(i,dp) * catalanMemoization(n-i-1,dp);
        }
        return dp[n] = ans;
    }

    // by tabulation
    public static int catalanTabulation(int n){
        int dp[] = new int[n+1];
        dp[0] = 1; 
        dp[1] = 1;

        for(int i=2; i<=n; i++){
            for(int j = 0; j<i; j++){
                dp[i] += dp[j]* dp[i-j-1];
            }
        }
        return dp[n]; 
    }

    public static void main(String[] args) {
        int n=4;
        int dp[] = new int[n+1];
        Arrays.fill(dp, -1);
        System.out.println(catalanRecursion(n));
        System.out.println(catalanMemoization(n, dp));
        System.out.println(catalanTabulation(n));
    }
}


----------------------------------------------------- Count BST(Binary Search Tree) -------------------------------------------------


import java.util.*;

public class Dp5 {

    // by tabulation
    public static int countBst(int n){
        int dp[] = new int[n+1];
        dp[0] = 1; 
        dp[1] = 1;

        for(int i=2; i<=n; i++){
            for(int j = 0; j<i; j++){
                int left = dp[j];
                int right = dp[i-j-1];
                dp[i] += left * right;
            }
        }
        return dp[n]; 
    }

    public static void main(String[] args) {
        int n=4;
        System.out.println(countBst(n));
    }
}
